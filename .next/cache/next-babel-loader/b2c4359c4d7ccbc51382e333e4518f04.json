{"ast":null,"code":"import nextConnect from 'next-connect';\n\nconst models = require('../../../db/models/index');\n\nimport middleware from '../../../middleware/auth';\n\nconst Sequelize = require('sequelize');\n\nconst Op = Sequelize.Op;\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  const {\n    method,\n    body\n  } = req;\n  const {\n    organization_id,\n    results,\n    page,\n    search,\n    sortField = \"tender_id\",\n    sortOrder = \"DESC\",\n    filters = []\n  } = req.query;\n  let _search = {};\n\n  if (search != \"\") {\n    if (filters == 'undefined' || filters == \"null\") {\n      // console.log(\"if1\")\n      _search = {\n        is_deleted: {\n          [Op.ne]: 1\n        },\n        [Op.or]: [{\n          tender_title: {\n            [Op.like]: '%' + search + '%'\n          }\n        }],\n        organization_id: organization_id\n      };\n    } else {\n      console.log(\"if2\");\n      console.log(filters);\n      _search = {\n        is_deleted: {\n          [Op.ne]: 1\n        },\n        [Op.or]: [{\n          tender_title: {\n            [Op.like]: '%' + search + '%'\n          }\n        }],\n        organization_id: organization_id\n      };\n    }\n  } else {\n    if (filters == 'undefined' || filters == 'null') {\n      // console.log(\"if3\")\n      // console.log(filters)\n      _search = {\n        is_deleted: {\n          [Op.ne]: 1\n        },\n        organization_id: organization_id\n      };\n    } else {\n      // console.log(\"if4\")\n      // console.log(filters)\n      _search = {\n        is_deleted: {\n          [Op.ne]: 1\n        },\n        organization_id: organization_id\n      };\n    }\n  } // console.log(_search)\n\n\n  const _tender = await models.tender.findAndCountAll({\n    attributes: ['tender_id', 'organization_id', 'tender_date', 'type_tender_id', 'tender_title', 'tender_detail', 'tender_keyword', 'expire_date', 'date_created', 'date_update', 'status_active', 'is_deleted', 'ip'],\n    where: _search,\n    offset: results * (page - 1),\n    limit: parseInt(results),\n    order: [[sortField != \"undefined\" && sortOrder != \"undefined\" ? sortField : \"tender_id\", sortOrder != \"undefined\" ? sortOrder == \"ascend\" ? \"ASC\" : \"DESC\" : \"DESC\"]]\n  });\n\n  return res.status(200).json({\n    info: {\n      page: page,\n      results: results\n    },\n    results: _tender.rows,\n    totalCount: _tender.count\n  });\n}).delete(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const tender_id = slug;\n\n  if (tender_id == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      tender_id: tender_id\n    });\n  }\n\n  const tender = await models.tender.update(dataTender, {\n    where: {\n      tender_id: tender_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success',\n    tender: tender ? tender : []\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/purchase-news/index.js"],"names":["nextConnect","models","require","middleware","Sequelize","Op","handler","use","get","req","res","method","body","organization_id","results","page","search","sortField","sortOrder","filters","query","_search","is_deleted","ne","or","tender_title","like","console","log","_tender","tender","findAndCountAll","attributes","where","offset","limit","parseInt","order","status","json","info","rows","totalCount","count","delete","slug","tender_id","undefined","message","update","dataTender"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\r\nconst models = require('../../../db/models/index');\r\nimport middleware from '../../../middleware/auth';\r\nconst Sequelize = require('sequelize');\r\nconst Op = Sequelize.Op;\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    const {\r\n      method,\r\n      body,\r\n    } = req;\r\n    const { organization_id, results, page, search, sortField = \"tender_id\", sortOrder = \"DESC\", filters = [] } = req.query;\r\n    let _search = {};\r\n\r\n\r\n    if (search != \"\") {\r\n      if (filters == 'undefined' || filters == \"null\") {\r\n        // console.log(\"if1\")\r\n        _search = {\r\n          is_deleted: {\r\n            [Op.ne]: 1,\r\n          },\r\n          [Op.or]: [{\r\n            tender_title: {\r\n              [Op.like]: '%' + search + '%'\r\n            },\r\n          }\r\n          ],\r\n          organization_id: organization_id\r\n\r\n        }\r\n      } else {\r\n        console.log(\"if2\")\r\n        console.log(filters)\r\n        _search = {\r\n          is_deleted: {\r\n            [Op.ne]: 1,\r\n          },\r\n          [Op.or]: [{\r\n            tender_title: {\r\n              [Op.like]: '%' + search + '%'\r\n            },\r\n          }\r\n          ],\r\n          organization_id: organization_id\r\n\r\n\r\n        }\r\n      }\r\n\r\n\r\n    } else {\r\n      if (filters == 'undefined' || filters == 'null') {\r\n        // console.log(\"if3\")\r\n        // console.log(filters)\r\n\r\n        _search = {\r\n\r\n          is_deleted: {\r\n            [Op.ne]: 1,\r\n          },\r\n          organization_id: organization_id\r\n\r\n        }\r\n      } else {\r\n        // console.log(\"if4\")\r\n        // console.log(filters)\r\n        _search = {\r\n\r\n          is_deleted: {\r\n            [Op.ne]: 1,\r\n          },\r\n          organization_id: organization_id\r\n\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n\r\n    // console.log(_search)\r\n    const _tender = await models.tender.findAndCountAll({\r\n      attributes: [\r\n        'tender_id', 'organization_id', 'tender_date', 'type_tender_id',\r\n        'tender_title', 'tender_detail', 'tender_keyword', 'expire_date',\r\n        'date_created', 'date_update', 'status_active', 'is_deleted', 'ip'\r\n      ],\r\n      where: _search,\r\n      offset: results * (page - 1),\r\n      limit: parseInt(results),\r\n      order: [\r\n        [sortField != \"undefined\" && sortOrder != \"undefined\" ? sortField : \"tender_id\", sortOrder != \"undefined\" ? sortOrder == \"ascend\" ? \"ASC\" : \"DESC\" : \"DESC\"]\r\n      ]\r\n    });\r\n    return res.status(200).json({\r\n      info: {\r\n        page: page,\r\n        results: results\r\n      },\r\n      results: _tender.rows,\r\n      totalCount: _tender.count\r\n    });\r\n\r\n  })\r\n  .delete(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const tender_id = slug;\r\n    if (tender_id == undefined) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        tender_id: tender_id,\r\n      });\r\n    }\r\n\r\n    const tender = await models.tender.update(dataTender, {\r\n      where: {\r\n        tender_id: tender_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      tender: tender ? tender : [],\r\n    })\r\n  })\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}