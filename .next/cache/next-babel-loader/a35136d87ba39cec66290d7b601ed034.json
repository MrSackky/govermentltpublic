{"ast":null,"code":"import nextConnect from 'next-connect';\n\nconst models = require('../../../db/models/index');\n\nimport middleware from '../../../middleware/auth';\nimport { addDays, getIPAddress } from '../../../middleware/utils';\n\nconst Sequelize = require('sequelize');\n\nconst Op = Sequelize.Op;\nimport moment from 'moment';\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  const {\n    query: {\n      id,\n      name\n    }\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const banner_id = slug;\n  const banners = await models.banners.findOne({\n    where: {\n      banner_id: banner_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success',\n    banners: banners ? banners : []\n  });\n}).put(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const banner_id = slug;\n  const {\n    banner_title,\n    banner_image,\n    banner_link,\n    status_active,\n    num_click,\n    seq\n  } = body; //SampleText.replace(\"Developer\", \"App Builder\");\n\n  const dataBanners = {\n    banner_title: banner_title,\n    banner_image: banner_image,\n    banner_link: banner_link,\n    num_click: num_click,\n    seq: seq,\n    status_active: status_active\n  };\n\n  if (banner_title == undefined || banner_image == undefined || banner_link == undefined || num_click == undefined || seq == undefined || status_active == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      banner_id: banner_id,\n      data: dataBanners\n    });\n  }\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format();\n  dataBanners.ip = ip;\n  dataBanners.is_deleted = 0;\n  dataBanners.date_updated = currentDate.replace(\"+07:00\", \"+00:00\");\n  const inforDataResult = await models.banners.update(dataBanners, {\n    where: {\n      banner_id: banner_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success' // organization: organization ? organization : []\n\n  }); // await User.update({ lastName: \"Doe\" }, {\n  //   where: {\n  //     lastName: null\n  //   }\n  // });\n}).delete(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const banner_id = slug;\n\n  if (banner_id == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      banner_id: banner_id\n    });\n  }\n\n  const dataBanners = {\n    is_deleted: 1\n  };\n  const banners = await models.banners.update(dataBanners, {\n    where: {\n      banner_id: banner_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success',\n    banners: banners ? banners : []\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/banner/[slug].js"],"names":["nextConnect","models","require","middleware","addDays","getIPAddress","Sequelize","Op","moment","handler","use","get","req","res","query","id","name","slug","banner_id","banners","findOne","where","status","json","message","put","body","banner_title","banner_image","banner_link","status_active","num_click","seq","dataBanners","undefined","data","ip","currentDate","format","is_deleted","date_updated","replace","inforDataResult","update","delete"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\r\nconst models = require('../../../db/models/index');\r\nimport middleware from '../../../middleware/auth';\r\nimport { addDays , getIPAddress } from '../../../middleware/utils';\r\nconst Sequelize = require('sequelize');\r\nconst Op = Sequelize.Op;\r\nimport moment from 'moment';\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    const {\r\n      query: { id, name },\r\n    } = req;\r\n    const { slug } = req.query;\r\n    const banner_id = slug;\r\n\r\n    const banners = await models.banners.findOne({\r\n      where: {\r\n        banner_id: banner_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      banners: banners ? banners : [],\r\n    });\r\n  })\r\n  .put(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const banner_id = slug;\r\n    const {\r\n      banner_title,\r\n      banner_image,\r\n      banner_link,\r\n      status_active,\r\n      num_click,\r\n      seq,\r\n    } = body;\r\n\r\n    //SampleText.replace(\"Developer\", \"App Builder\");\r\n    const dataBanners = {\r\n      banner_title: banner_title,\r\n      banner_image: banner_image,\r\n      banner_link: banner_link,\r\n      num_click: num_click,\r\n      seq: seq,\r\n      status_active: status_active,\r\n    };\r\n\r\n    if (\r\n      banner_title == undefined ||\r\n      banner_image == undefined ||\r\n      banner_link == undefined ||\r\n      num_click == undefined ||\r\n      seq == undefined ||\r\n      status_active == undefined\r\n    ) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        banner_id: banner_id,\r\n        data: dataBanners,\r\n      });\r\n    }\r\n\r\n    var ip = await getIPAddress()\r\n    var currentDate = moment().format()\r\n    dataBanners.ip = ip\r\n    dataBanners.is_deleted = 0\r\n    dataBanners.date_updated = currentDate.replace(\"+07:00\", \"+00:00\")\r\n\r\n    const inforDataResult = await models.banners.update(dataBanners, {\r\n      where: {\r\n        banner_id: banner_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      // organization: organization ? organization : []\r\n    });\r\n\r\n    // await User.update({ lastName: \"Doe\" }, {\r\n    //   where: {\r\n    //     lastName: null\r\n    //   }\r\n    // });\r\n  })\r\n  .delete(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const banner_id = slug;\r\n    if (banner_id == undefined) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        banner_id: banner_id,\r\n      });\r\n    }\r\n\r\n    const dataBanners = {\r\n      is_deleted: 1,\r\n    };\r\n\r\n    const banners = await models.banners.update(dataBanners, {\r\n      where: {\r\n        banner_id: banner_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      banners: banners ? banners : [],\r\n    });\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}