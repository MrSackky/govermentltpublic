{"ast":null,"code":"import nextConnect from 'next-connect';\n\nconst models = require('../../../../db/models/index');\n\nimport middleware from '../../../../middleware/auth';\nimport { addDays, getIPAddress } from '../../../../middleware/utils';\n\nconst bcrypt = require('bcryptjs');\n\nconst salt = bcrypt.genSaltSync(10);\nimport moment from 'moment';\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  return res.status(400).json({\n    status: 400,\n    message: 'deny permission!!'\n  });\n}) // Post method\n.post(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const {\n    organization_id,\n    activities_date,\n    activities_title,\n    activities_detail,\n    activities_image,\n    activities_keyword,\n    is_slide,\n    status_active\n  } = body; // const userId = slug;\n\n  const dataUser = {\n    \"organization_id\": organization_id,\n    \"activities_date\": activities_date.replace(\"+07:00\", \"+00:00\"),\n    \"activities_title\": activities_title,\n    \"activities_detail\": activities_detail,\n    \"activities_image\": activities_image,\n    \"activities_keyword\": activities_keyword ? activities_keyword : \"\",\n    \"is_slide\": is_slide,\n    \"status_active\": status_active\n  };\n  console.log(dataUser);\n\n  if (organization_id == undefined || activities_date == undefined || activities_title == undefined || activities_detail == undefined || activities_image == undefined || is_slide == undefined || status_active == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      dataUser: dataUser\n    });\n  }\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format();\n  dataUser.ip = ip;\n  dataUser.is_deleted = 0;\n  dataUser.date_created = currentDate.replace(\"+07:00\", \"+00:00\");\n  dataUser.date_update = currentDate.replace(\"+07:00\", \"+00:00\");\n  const newAddactivities = await models.activities.create(dataUser);\n\n  if (newAddactivities == null) {\n    return res.status(500).json({\n      status: 500,\n      message: 'Internal error'\n    });\n  }\n\n  return res.status(200).json({\n    status: 200,\n    message: 'Insert completed'\n  });\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/Sackky/Desktop/government/pages/api/admin/management/add-activities.js"],"names":["nextConnect","models","require","middleware","addDays","getIPAddress","bcrypt","salt","genSaltSync","moment","handler","use","get","req","res","status","json","message","post","body","slug","query","organization_id","activities_date","activities_title","activities_detail","activities_image","activities_keyword","is_slide","status_active","dataUser","replace","console","log","undefined","ip","currentDate","format","is_deleted","date_created","date_update","newAddactivities","activities","create"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\r\nconst models = require('../../../../db/models/index');\r\nimport middleware from '../../../../middleware/auth';\r\nimport { addDays, getIPAddress } from '../../../../middleware/utils';\r\nconst bcrypt = require('bcryptjs');\r\nconst salt = bcrypt.genSaltSync(10);\r\nimport moment from 'moment';\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    return res.status(400).json({\r\n      status: 400,\r\n      message: 'deny permission!!',\r\n    });\r\n  })\r\n  // Post method\r\n  .post(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const { organization_id, activities_date, activities_title, activities_detail, activities_image, activities_keyword, is_slide, status_active } = body;\r\n    // const userId = slug;\r\n    const dataUser = {\r\n      \"organization_id\": organization_id,\r\n      \"activities_date\": activities_date.replace(\"+07:00\", \"+00:00\"),\r\n      \"activities_title\": activities_title,\r\n      \"activities_detail\": activities_detail,\r\n      \"activities_image\": activities_image,\r\n      \"activities_keyword\": activities_keyword ? activities_keyword : \"\",\r\n      \"is_slide\": is_slide,\r\n      \"status_active\": status_active,\r\n    };\r\n    console.log(dataUser)\r\n    if (organization_id == undefined || activities_date == undefined || activities_title == undefined || activities_detail == undefined || activities_image == undefined || is_slide == undefined || status_active == undefined) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        dataUser: dataUser,\r\n      });\r\n    }\r\n\r\n    var ip = await getIPAddress()\r\n    var currentDate = moment().format()\r\n    dataUser.ip = ip\r\n    dataUser.is_deleted = 0\r\n    dataUser.date_created = currentDate.replace(\"+07:00\", \"+00:00\")\r\n    dataUser.date_update = currentDate.replace(\"+07:00\", \"+00:00\")\r\n\r\n    const newAddactivities = await models.activities.create(dataUser);\r\n\r\n    if (newAddactivities == null) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        message: 'Internal error',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'Insert completed',\r\n    });\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}