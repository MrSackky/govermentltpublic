{"ast":null,"code":"import nextConnect from 'next-connect';\n\nconst models = require('../../../db/models/index');\n\nimport middleware from '../../../middleware/auth';\nimport { absoluteUrl, checkIsLogin, getIPAddress, convertDatetoAddDB } from '../../../middleware/utils';\nimport moment from 'moment';\n\nconst Sequelize = require('sequelize');\n\nconst Op = Sequelize.Op;\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {}).put(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const menu_sub_id = slug;\n  const {\n    menu_title,\n    menu_detail,\n    is_show,\n    is_pattern_menu,\n    pattern_menu\n  } = body; //SampleText.replace(\"Developer\", \"App Builder\");\n\n  const dataMenu = {\n    menu_title: menu_title,\n    menu_detail: menu_detail ? menu_detail : \"\",\n    is_show: is_show,\n    is_pattern_menu: is_pattern_menu,\n    pattern_menu: pattern_menu\n  };\n\n  if (menu_sub_id == undefined || menu_title == undefined || menu_detail == undefined || is_show == undefined || is_pattern_menu == undefined || pattern_menu == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      menu_sub_id: menu_sub_id,\n      data: dataMenu\n    });\n  }\n\n  const menuDataResult = await models.Menu_sub.update(dataMenu, {\n    where: {\n      menu_sub_id: menu_sub_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: \"success\" // organization: organization ? organization : []\n\n  }); // await User.update({ lastName: \"Doe\" }, {\n  //   where: {\n  //     lastName: null\n  //   }\n  // });\n}).delete(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const menu_sub_id = slug;\n\n  if (menu_sub_id == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      menu_sub_id: menu_sub_id\n    });\n  }\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format(); // dataMenu.ip = ip\n  // dataMenu.is_deleted = 0\n  // dataMenu.date_created = currentDate.replace(\"+07:00\", \"+00:00\")\n  // dataMenu.date_updated = currentDate.replace(\"+07:00\", \"+00:00\")\n\n  const dataInformation = {\n    is_deleted: 1,\n    ip: ip,\n    date_updated: currentDate.replace(\"+07:00\", \"+00:00\")\n  };\n\n  const _menu = await models.Menu_sub.update(dataInformation, {\n    where: {\n      menu_sub_id: menu_sub_id\n    }\n  });\n\n  return res.status(200).json({\n    status: 200,\n    message: 'success'\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/menu-sub/[slug].js"],"names":["nextConnect","models","require","middleware","absoluteUrl","checkIsLogin","getIPAddress","convertDatetoAddDB","moment","Sequelize","Op","handler","use","get","req","res","put","body","slug","query","menu_sub_id","menu_title","menu_detail","is_show","is_pattern_menu","pattern_menu","dataMenu","undefined","status","json","message","data","menuDataResult","Menu_sub","update","where","delete","ip","currentDate","format","dataInformation","is_deleted","date_updated","replace","_menu"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\r\nconst models = require('../../../db/models/index');\r\nimport middleware from '../../../middleware/auth';\r\nimport { absoluteUrl, checkIsLogin, getIPAddress, convertDatetoAddDB } from '../../../middleware/utils';\r\nimport moment from 'moment';\r\nconst Sequelize = require('sequelize');\r\nconst Op = Sequelize.Op;\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n\r\n\r\n  })\r\n  .put(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const menu_sub_id = slug;\r\n    const {\r\n      menu_title,\r\n      menu_detail,\r\n      is_show,\r\n      is_pattern_menu,\r\n      pattern_menu,\r\n    } = body;\r\n    //SampleText.replace(\"Developer\", \"App Builder\");\r\n    const dataMenu = {\r\n      menu_title: menu_title,\r\n      menu_detail: menu_detail ? menu_detail : \"\",\r\n      is_show: is_show,\r\n      is_pattern_menu: is_pattern_menu,\r\n      pattern_menu: pattern_menu,\r\n    };\r\n\r\n    if (\r\n      menu_sub_id == undefined ||\r\n      menu_title == undefined || menu_detail == undefined ||\r\n       is_show == undefined ||\r\n       is_pattern_menu == undefined ||\r\n      pattern_menu == undefined \r\n    ) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        menu_sub_id: menu_sub_id,\r\n        data: dataMenu\r\n      });\r\n    }\r\n\r\n\r\n    const menuDataResult = await models.Menu_sub.update(\r\n      dataMenu, {\r\n      where: {\r\n        menu_sub_id: menu_sub_id\r\n      }\r\n    }\r\n    );\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: \"success\",\r\n      // organization: organization ? organization : []\r\n    });\r\n\r\n    // await User.update({ lastName: \"Doe\" }, {\r\n    //   where: {\r\n    //     lastName: null\r\n    //   }\r\n    // });\r\n\r\n  })\r\n  .delete(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const menu_sub_id = slug;\r\n    if (menu_sub_id == undefined) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        menu_sub_id: menu_sub_id,\r\n      });\r\n    }\r\n    var ip = await getIPAddress()\r\n    var currentDate = moment().format()\r\n    // dataMenu.ip = ip\r\n    // dataMenu.is_deleted = 0\r\n    // dataMenu.date_created = currentDate.replace(\"+07:00\", \"+00:00\")\r\n    // dataMenu.date_updated = currentDate.replace(\"+07:00\", \"+00:00\")\r\n    const dataInformation = {\r\n      is_deleted: 1,\r\n      ip: ip,\r\n      date_updated: currentDate.replace(\"+07:00\", \"+00:00\"),\r\n    };\r\n\r\n    const _menu = await models.Menu_sub.update(dataInformation, {\r\n      where: {\r\n        menu_sub_id: menu_sub_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n    });\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}