{"ast":null,"code":"import nextConnect from 'next-connect';\n\nconst models = require('../../../db/models/index');\n\nimport middleware from '../../../middleware/auth';\nimport { addDays, getIPAddress } from '../../../middleware/utils';\n\nconst Sequelize = require('sequelize');\n\nconst Op = Sequelize.Op;\nimport moment from 'moment';\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  const {\n    query: {\n      id,\n      name\n    }\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const activities_id = slug;\n  const activities = await models.activities.findOne({\n    where: {\n      activities_id: activities_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: \"success\",\n    activities: activities ? activities : []\n  });\n}).put(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const activities_id = slug;\n  const {\n    organization_id,\n    activities_date,\n    activities_title,\n    activities_detail,\n    activities_image,\n    activities_keyword,\n    is_slide,\n    status_active\n  } = body; //SampleText.replace(\"Developer\", \"App Builder\");\n\n  const dataActivities = {\n    organization_id: organization_id,\n    activities_title: activities_title,\n    activities_detail: activities_detail,\n    activities_image: activities_image,\n    activities_date: activities_date.replace('+07:00', '+00:00'),\n    activities_keyword: activities_keyword,\n    is_slide: is_slide,\n    status_active: status_active\n  };\n\n  if (organization_id == undefined || activities_date == undefined || activities_title == undefined || activities_detail == undefined || activities_image == undefined || activities_keyword == undefined || is_slide == undefined || status_active == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      activities_id: activities_id,\n      data: dataActivities\n    });\n  }\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format();\n  dataActivities.ip = ip;\n  dataActivities.is_deleted = 0;\n  dataActivities.date_update = currentDate.replace(\"+07:00\", \"+00:00\");\n  const activitiesDataResult = await models.activities.update(dataActivities, {\n    where: {\n      activities_id: activities_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success' // organization: organization ? organization : []\n\n  }); // await User.update({ lastName: \"Doe\" }, {\n  //   where: {\n  //     lastName: null\n  //   }\n  // });\n}).delete(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const activities_id = slug;\n\n  if (activities_id == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      activities_id: activities_id\n    });\n  }\n\n  const dataActivities = {\n    is_deleted: 1\n  };\n  const activities = await models.activities.update(dataActivities, {\n    where: {\n      activities_id: activities_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success',\n    activities: activities ? activities : []\n  });\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/Sackky/Desktop/government/pages/api/activities/[slug].js"],"names":["nextConnect","models","require","middleware","addDays","getIPAddress","Sequelize","Op","moment","handler","use","get","req","res","query","id","name","slug","activities_id","activities","findOne","where","status","json","message","put","body","organization_id","activities_date","activities_title","activities_detail","activities_image","activities_keyword","is_slide","status_active","dataActivities","replace","undefined","data","ip","currentDate","format","is_deleted","date_update","activitiesDataResult","update","delete"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\r\nconst models = require('../../../db/models/index');\r\nimport middleware from '../../../middleware/auth';\r\nimport { addDays , getIPAddress } from '../../../middleware/utils';\r\nconst Sequelize = require('sequelize');\r\nconst Op = Sequelize.Op;\r\nimport moment from 'moment';\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    const {\r\n      query: { id, name },\r\n    } = req;\r\n    const { slug } = req.query;\r\n    const activities_id = slug;\r\n\r\n    const activities = await models.activities.findOne({\r\n      where: {\r\n        activities_id : activities_id,\r\n      },\r\n     \r\n    });\r\n    \r\n    \r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: \"success\",\r\n      activities: activities ? activities : []\r\n    });\r\n  })\r\n  .put(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const activities_id = slug;\r\n    const {\r\n      organization_id,\r\n      activities_date,\r\n      activities_title,\r\n      activities_detail,\r\n      activities_image,\r\n      activities_keyword,\r\n      is_slide,\r\n      status_active,\r\n    } = body;\r\n\r\n    //SampleText.replace(\"Developer\", \"App Builder\");\r\n    const dataActivities = {\r\n      organization_id: organization_id,\r\n      activities_title: activities_title,\r\n      activities_detail: activities_detail,\r\n      activities_image: activities_image,\r\n      activities_date: activities_date.replace('+07:00', '+00:00'),\r\n      activities_keyword: activities_keyword,\r\n      is_slide: is_slide,\r\n      status_active: status_active,\r\n    };\r\n\r\n    if (\r\n      organization_id == undefined ||\r\n      activities_date == undefined ||\r\n      activities_title == undefined ||\r\n      activities_detail == undefined ||\r\n      activities_image == undefined ||\r\n      activities_keyword == undefined ||\r\n      is_slide  == undefined ||\r\n      status_active == undefined\r\n    ) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        activities_id: activities_id,\r\n        data: dataActivities,\r\n      });\r\n    }\r\n    \r\n    var ip = await getIPAddress()\r\n    var currentDate = moment().format()\r\n    dataActivities.ip = ip\r\n    dataActivities.is_deleted = 0\r\n    dataActivities.date_update = currentDate.replace(\"+07:00\", \"+00:00\")\r\n\r\n    const activitiesDataResult = await models.activities.update(dataActivities, {\r\n      where: {\r\n        activities_id: activities_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      // organization: organization ? organization : []\r\n    });\r\n\r\n    // await User.update({ lastName: \"Doe\" }, {\r\n    //   where: {\r\n    //     lastName: null\r\n    //   }\r\n    // });\r\n  })\r\n  .delete(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const activities_id = slug;\r\n    if (activities_id == undefined) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        activities_id: activities_id,\r\n      });\r\n    }\r\n\r\n    const dataActivities = {\r\n      is_deleted: 1,\r\n    };\r\n\r\n    const activities = await models.activities.update(dataActivities, {\r\n      where: {\r\n        activities_id: activities_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      activities: activities ? activities : [],\r\n    });\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}