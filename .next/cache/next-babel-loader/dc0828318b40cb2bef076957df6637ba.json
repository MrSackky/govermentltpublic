{"ast":null,"code":"import nextConnect from 'next-connect';\n\nconst models = require('../../../db/models/index');\n\nimport middleware from '../../../middleware/auth';\nimport { addDays } from '../../../middleware/utils';\n\nconst bcrypt = require('bcryptjs');\n\nconst salt = bcrypt.genSaltSync(10);\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  return res.status(400).json({\n    status: 400,\n    message: 'deny permission!!'\n  });\n}) // Post method\n.post(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const {\n    email\n  } = body; // const userId = slug;\n\n  if (!email) {\n    return res.status(200).json({\n      status: 201,\n      message: '- ไม่พบข้อมูล',\n      email: email\n    });\n  } // const user = await User.create({\n  //   username: 'alice123',\n  //   isAdmin: true\n  // }, { fields: ['username'] });\n\n\n  const dataOrganization = await models.Organization.findOne({\n    where: {\n      organization_email: email\n    },\n    attributes: ['organization_id', 'organization_email']\n  });\n\n  if (dataOrganization != null) {\n    return res.status(200).json({\n      status: 202,\n      message: 'มี email `' + email + '` ในระบบแล้ว'\n    });\n  }\n\n  const dataUsers = await models.Users.findOne({\n    attributes: ['user_id', 'user_name'],\n    where: {\n      user_name: email\n    }\n  });\n\n  if (dataUsers != null) {\n    return res.status(200).json({\n      status: 203,\n      message: 'มี email `' + email + '` ในระบบแล้ว'\n    });\n  }\n\n  return res.status(200).json({\n    status: 200,\n    message: 'สามารถใช้ email `' + email + '` ได้'\n  }); // .then(([_user, created]) => {\n  //   // console.log(_user.get({\n  //   //   plain: true\n  //   // }))\n  //   console.log(\"created\")\n  //   console.log(created)\n  //   console.log(\"_user\")\n  //   console.log(_user.dataValues)\n  //   if (!created) {\n  //     return res.status(200).json({\n  //       status: 202,\n  //       message: 'data user is exist.',\n  //     });\n  //   }\n  //   return res.status(200).json({\n  //     status: 'success',\n  //     message: 'done',\n  //     // dataRequest: dataUser,\n  //     dataResult: _user.dataValues,\n  //   });\n  //   //user data\n  //   const dataUser2 = {\n  //     user_name: organization_email,\n  //     password,\n  //     name_user,\n  //     organization_id: _user.dataValues.organization_id,\n  //     email_user: organization_email,\n  //     phone_user: organization_phone,\n  //   };\n  // await models.Users.findOrCreate({ where: { user_name: organization_email }, defaults: dataUser2 })\n  //   .then(([_user2, created2]) => {\n  //     console.log(\"created2\")\n  //     console.log(created2)\n  //     console.log(\"_user2\")\n  //     console.log(_user2)\n  //     if (!created2) {\n  //       return res.status(200).json({\n  //         status: 202,\n  //         message: 'data user \"email\" is exist.',\n  //       });\n  //     }\n  //     return res.status(200).json({\n  //       status: 'success',\n  //       message: 'done',\n  //       // dataRequest: dataUser,\n  //       // dataResult: _user.Organization.dataValues,\n  //     });\n  //   })\n  // })\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/organization/check-email.js"],"names":["nextConnect","models","require","middleware","addDays","bcrypt","salt","genSaltSync","handler","use","get","req","res","status","json","message","post","body","slug","query","email","dataOrganization","Organization","findOne","where","organization_email","attributes","dataUsers","Users","user_name"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\r\nconst models = require('../../../db/models/index');\r\nimport middleware from '../../../middleware/auth';\r\nimport { addDays } from '../../../middleware/utils';\r\nconst bcrypt = require('bcryptjs');\r\nconst salt = bcrypt.genSaltSync(10);\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    return res.status(400).json({\r\n      status: 400,\r\n      message: 'deny permission!!',\r\n    });\r\n  })\r\n  // Post method\r\n  .post(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const { email } = body;\r\n    // const userId = slug;\r\n\r\n\r\n    if (!email) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: '- ไม่พบข้อมูล',\r\n        email: email\r\n      });\r\n    }\r\n    // const user = await User.create({\r\n    //   username: 'alice123',\r\n    //   isAdmin: true\r\n    // }, { fields: ['username'] });\r\n    const dataOrganization = await models.Organization.findOne({ \r\n      where: { organization_email: email } ,\r\n      attributes: ['organization_id', 'organization_email'],\r\n    });\r\n    if (dataOrganization != null) {\r\n      return res.status(200).json({\r\n        status: 202,\r\n        message: 'มี email `'+ email +'` ในระบบแล้ว',\r\n      });\r\n    }\r\n\r\n    const dataUsers = await models.Users.findOne({ \r\n      attributes: ['user_id', 'user_name'],\r\n      where: { user_name: email } \r\n    });\r\n    if (dataUsers != null) {\r\n      return res.status(200).json({\r\n        status: 203,\r\n        message: 'มี email `'+ email +'` ในระบบแล้ว',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'สามารถใช้ email `'+ email +'` ได้',\r\n    });\r\n    // .then(([_user, created]) => {\r\n    //   // console.log(_user.get({\r\n    //   //   plain: true\r\n    //   // }))\r\n    //   console.log(\"created\")\r\n    //   console.log(created)\r\n    //   console.log(\"_user\")\r\n    //   console.log(_user.dataValues)\r\n\r\n    //   if (!created) {\r\n    //     return res.status(200).json({\r\n    //       status: 202,\r\n    //       message: 'data user is exist.',\r\n    //     });\r\n    //   }\r\n\r\n    //   return res.status(200).json({\r\n    //     status: 'success',\r\n    //     message: 'done',\r\n    //     // dataRequest: dataUser,\r\n    //     dataResult: _user.dataValues,\r\n    //   });\r\n    //   //user data\r\n    //   const dataUser2 = {\r\n    //     user_name: organization_email,\r\n    //     password,\r\n    //     name_user,\r\n    //     organization_id: _user.dataValues.organization_id,\r\n    //     email_user: organization_email,\r\n    //     phone_user: organization_phone,\r\n    //   };\r\n\r\n    // await models.Users.findOrCreate({ where: { user_name: organization_email }, defaults: dataUser2 })\r\n    //   .then(([_user2, created2]) => {\r\n\r\n    //     console.log(\"created2\")\r\n    //     console.log(created2)\r\n    //     console.log(\"_user2\")\r\n    //     console.log(_user2)\r\n\r\n    //     if (!created2) {\r\n    //       return res.status(200).json({\r\n    //         status: 202,\r\n    //         message: 'data user \"email\" is exist.',\r\n    //       });\r\n    //     }\r\n    //     return res.status(200).json({\r\n    //       status: 'success',\r\n    //       message: 'done',\r\n    //       // dataRequest: dataUser,\r\n    //       // dataResult: _user.Organization.dataValues,\r\n    //     });\r\n    //   })\r\n\r\n    // })\r\n\r\n\r\n\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}