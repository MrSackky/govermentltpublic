{"ast":null,"code":"import nextConnect from 'next-connect';\nimport middleware from '../../../middleware/auth';\n\nconst models = require('../../../db/models/index');\n\nconst Sequelize = require('sequelize');\n\nconst Op = Sequelize.Op;\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  const {\n    method,\n    body\n  } = req;\n  const {\n    organization_id = 0,\n    header_id = 1\n  } = req.query;\n  let _search = {\n    // organization_id: organization_id,\n    organization_id: organization_id,\n    [Op.or]: [{\n      is_deleted: null\n    }, {\n      is_deleted: 0\n    }] // is_primary_menu: poll_id\n\n  }; // console.log(_search)\n\n  const _menu = await models.customer_header.findAndCountAll({\n    // attributes: ['package_id','code_package','name_package','size_limit']\n    where: _search,\n    // offset: results * (page - 1),\n    // limit: parseInt(results),\n    order: [[\"seq\", \"ASC\"], [\"header_id\", \"ASC\"]]\n  });\n\n  return res.status(200).json({\n    // info: {\n    //   page: page,\n    //   results: results\n    // },\n    results: _menu.rows,\n    totalCount: _menu.count\n  });\n}).post(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const {\n    organization_id,\n    header_image,\n    header_link,\n    is_show\n  } = body; //SampleText.replace(\"Developer\", \"App Builder\");\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format();\n  const dataMenu = {\n    organization_id: organization_id,\n    header_image: header_image,\n    header_link: header_link,\n    is_show: is_show,\n    ip: ip,\n    date_updated: currentDate.replace(\"+07:00\", \"+00:00\")\n  };\n\n  if (organization_id == undefined || header_image == undefined // header_link == undefined\n  ) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      dataMenu: dataMenu\n    });\n  } // console.log(dataIntro)\n\n\n  const newMenu = await models.customer_header.create(dataMenu);\n\n  if (newMenu == null) {\n    return res.status(500).json({\n      status: 500,\n      message: 'Internal error'\n    });\n  }\n\n  return res.status(200).json({\n    status: 200,\n    message: 'บันทึกข้อมูลสำเร็จ'\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/covermenu/index.js"],"names":["nextConnect","middleware","models","require","Sequelize","Op","handler","use","get","req","res","method","body","organization_id","header_id","query","_search","or","is_deleted","_menu","customer_header","findAndCountAll","where","order","status","json","results","rows","totalCount","count","post","slug","header_image","header_link","is_show","ip","getIPAddress","currentDate","moment","format","dataMenu","date_updated","replace","undefined","message","newMenu","create"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\r\nimport middleware from '../../../middleware/auth';\r\n\r\nconst models = require('../../../db/models/index');\r\nconst Sequelize = require('sequelize');\r\nconst Op = Sequelize.Op;\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    const {\r\n      method,\r\n      body,\r\n    } = req;\r\n    const { organization_id = 0, header_id = 1 } = req.query;\r\n    let _search = {\r\n      // organization_id: organization_id,\r\n      organization_id: organization_id,\r\n      [Op.or]: [{\r\n        is_deleted: null,\r\n      },\r\n      {\r\n        is_deleted: 0,\r\n      }],\r\n      // is_primary_menu: poll_id\r\n    };\r\n\r\n    // console.log(_search)\r\n    const _menu = await models.customer_header.findAndCountAll({\r\n      // attributes: ['package_id','code_package','name_package','size_limit']\r\n      where: _search,\r\n      // offset: results * (page - 1),\r\n      // limit: parseInt(results),\r\n\r\n      order: [\r\n        [\"seq\", \"ASC\"],\r\n        [\"header_id\", \"ASC\"]\r\n      ]\r\n    });\r\n    return res.status(200).json({\r\n      // info: {\r\n      //   page: page,\r\n      //   results: results\r\n      // },\r\n      results: _menu.rows,\r\n      totalCount: _menu.count\r\n    });\r\n  })\r\n  .post(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const {\r\n      organization_id,\r\n      header_image,\r\n      header_link,\r\n      is_show\r\n    } = body;\r\n    //SampleText.replace(\"Developer\", \"App Builder\");\r\n    var ip = await getIPAddress()\r\n    var currentDate = moment().format()\r\n    const dataMenu = {\r\n      organization_id: organization_id,\r\n      header_image: header_image,\r\n      header_link: header_link,\r\n      is_show: is_show,\r\n      ip: ip,\r\n      date_updated: currentDate.replace(\"+07:00\", \"+00:00\"),\r\n    };\r\n\r\n    if (\r\n      organization_id == undefined ||\r\n      header_image == undefined\r\n      // header_link == undefined\r\n    ) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        dataMenu: dataMenu\r\n      });\r\n    }\r\n\r\n\r\n    // console.log(dataIntro)\r\n    const newMenu = await models.customer_header.create(dataMenu);\r\n\r\n    if (newMenu == null) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        message: 'Internal error',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'บันทึกข้อมูลสำเร็จ',\r\n    });\r\n  });\r\n\r\n\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}