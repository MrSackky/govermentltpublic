{"ast":null,"code":"import models from '../../db/models/index';\nimport nextConnect from 'next-connect';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { message } from 'antd';\n\nconst {\n  promisify\n} = require('util');\n\nconst fastFolderSize = require('fast-folder-size');\n\nimport { getDatediff } from '../../middleware/utils';\nconst KEY = process.env.JWT_KEY;\nconst handler = nextConnect().get((req, res) => {}).post(async (req, res) => {\n  /* Get Post Data */\n  const {\n    user_name,\n    password\n  } = req.body;\n  /* Any how email or password is blank */\n\n  if (!user_name || !password) {\n    return res.status(200).json({\n      status: 400,\n      message: 'Request missing username or password'\n    });\n  }\n  /* Check user in database */\n\n\n  const user = await models.Users.findOne({\n    where: {\n      user_name: user_name,\n      status_active: 1\n    },\n    include: [{\n      model: models.Organization,\n      as: '_organizations'\n    }],\n    attributes: ['user_id', 'user_name', 'password', 'organization_id', 'type_user'],\n    limit: 1\n  });\n  /* Check if exists */\n\n  if (!user) {\n    return res.status(200).json({\n      status: 401,\n      message: 'ไม่มีชื่อผู้ใช้นี้'\n    });\n  }\n  /* Define variables */\n\n\n  const dataUser = user.toJSON(); // console.log(dataUser)\n\n  const userId = dataUser.user_id,\n        userEmail = dataUser.user_name,\n        userPassword = dataUser.password,\n        type_user = dataUser.type_user,\n        organization_id = dataUser.organization_id,\n        package_id = dataUser._organizations.package,\n        date_expired = dataUser._organizations.date_expired,\n        name_organizations = dataUser._organizations.organization_name;\n  /* Check and compare password */\n\n  bcrypt.compare(password, userPassword).then(async isMatch => {\n    if (isMatch) {\n      /* User matched */\n\n      /* Create JWT Payload */\n      const payload = {\n        id: userId,\n        email: userEmail,\n        type_user: type_user,\n        organization_id: organization_id,\n        name_organizations: name_organizations,\n        package_id: package_id,\n        date_expired: date_expired\n      };\n\n      if (type_user == 2) {\n        var _datediffExpried = await getDatediff(date_expired);\n\n        if (parseInt(_datediffExpried) <= -31) {\n          return res.status(200).json({\n            status: 201,\n            message: 'หมดอายุการใช้งาน\\r\\nกรุณาทำการต่ออายุการใช้งาน'\n          });\n        }\n\n        try {\n          const fastFolderSizeAsync = promisify(fastFolderSize);\n          const bytes = await fastFolderSizeAsync('./public/uploads/c-' + organization_id);\n          console.log(\"bytes\");\n          console.log(bytes);\n          payload.size_used = bytes;\n          const dataOrganization = {\n            size_used: bytes\n          };\n          console.log(dataOrganization);\n          const organization = await models.Organization.update(dataOrganization, {\n            where: {\n              organization_id: organization_id\n            }\n          });\n        } catch (error) {}\n      }\n      /* Sign token */\n\n\n      jwt.sign(payload, KEY, {\n        // expiresIn: 31556926, // 1 year in seconds\n        expiresIn: 7200 // 1 year in seconds\n\n      }, (err, token) => {\n        return res.status(200).json({\n          status: 200,\n          message: 'เข้าสู่ระบบสำเร็จ ',\n          token: token // bytes\n\n        });\n      });\n    } else {\n      return res.status(200).json({\n        status: 402,\n        message: 'ชื่อผู้ใช้หรือรหัสผ่านผิด'\n      });\n    }\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/auth.js"],"names":["models","nextConnect","bcrypt","jwt","message","promisify","require","fastFolderSize","getDatediff","KEY","process","env","JWT_KEY","handler","get","req","res","post","user_name","password","body","status","json","user","Users","findOne","where","status_active","include","model","Organization","as","attributes","limit","dataUser","toJSON","userId","user_id","userEmail","userPassword","type_user","organization_id","package_id","_organizations","package","date_expired","name_organizations","organization_name","compare","then","isMatch","payload","id","email","_datediffExpried","parseInt","fastFolderSizeAsync","bytes","console","log","size_used","dataOrganization","organization","update","error","sign","expiresIn","err","token"],"mappings":"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","sourcesContent":["import models from '../../db/models/index';\r\nimport nextConnect from 'next-connect';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport { message } from 'antd';\r\nconst { promisify } = require('util')\r\nconst fastFolderSize = require('fast-folder-size')\r\nimport { getDatediff } from '../../middleware/utils';\r\n\r\nconst KEY = process.env.JWT_KEY;\r\n\r\nconst handler = nextConnect()\r\n  .get((req, res) => { })\r\n  .post(async (req, res) => {\r\n    /* Get Post Data */\r\n    const { user_name, password } = req.body;\r\n    /* Any how email or password is blank */\r\n    if (!user_name || !password) {\r\n      return res.status(200).json({\r\n        status: 400,\r\n        message: 'Request missing username or password',\r\n      });\r\n    }\r\n    /* Check user in database */\r\n    const user = await models.Users.findOne({\r\n      where: { user_name: user_name, status_active: 1 },\r\n      include: [{\r\n        model: models.Organization,\r\n        as: '_organizations',\r\n      },],\r\n      attributes: ['user_id', 'user_name', 'password', 'organization_id', 'type_user'],\r\n      limit: 1,\r\n    });\r\n    /* Check if exists */\r\n    if (!user) {\r\n      return res.status(200).json({ status: 401, message: 'ไม่มีชื่อผู้ใช้นี้' });\r\n    }\r\n    /* Define variables */\r\n    const dataUser = user.toJSON();\r\n    // console.log(dataUser)\r\n    const userId = dataUser.user_id,\r\n      userEmail = dataUser.user_name,\r\n      userPassword = dataUser.password,\r\n      type_user = dataUser.type_user,\r\n      organization_id = dataUser.organization_id,\r\n      package_id = dataUser._organizations.package,\r\n      date_expired = dataUser._organizations.date_expired,\r\n      name_organizations = dataUser._organizations.organization_name;\r\n    /* Check and compare password */\r\n    bcrypt.compare(password, userPassword).then(async isMatch => {\r\n      if (isMatch) {\r\n        /* User matched */\r\n        /* Create JWT Payload */\r\n        \r\n\r\n\r\n        const payload = {\r\n          id: userId,\r\n          email: userEmail,\r\n          type_user: type_user,\r\n          organization_id: organization_id,\r\n          name_organizations: name_organizations,\r\n          package_id: package_id,\r\n          date_expired: date_expired\r\n        };\r\n\r\n\r\n\r\n        if (type_user == 2) {\r\n         \r\n          var _datediffExpried = await getDatediff(date_expired)\r\n          if (parseInt(_datediffExpried) <= -31) {\r\n  \r\n            return res.status(200).json({\r\n              status: 201,\r\n              message: 'หมดอายุการใช้งาน\\r\\nกรุณาทำการต่ออายุการใช้งาน',\r\n            });\r\n  \r\n          }\r\n\r\n          try {\r\n            const fastFolderSizeAsync = promisify(fastFolderSize)\r\n            const bytes = await fastFolderSizeAsync('./public/uploads/c-' + organization_id)\r\n\r\n            console.log(\"bytes\")\r\n            console.log(bytes)\r\n            payload.size_used = bytes\r\n\r\n            const dataOrganization = {\r\n              size_used: bytes,\r\n            };\r\n            console.log(dataOrganization)\r\n            const organization = await models.Organization.update(\r\n              dataOrganization, {\r\n              where: {\r\n                organization_id: organization_id\r\n              }\r\n            }\r\n            );\r\n          } catch (error) {\r\n\r\n          }\r\n\r\n\r\n        }\r\n\r\n\r\n        /* Sign token */\r\n        jwt.sign(\r\n          payload,\r\n          KEY,\r\n          {\r\n            // expiresIn: 31556926, // 1 year in seconds\r\n            expiresIn: 7200, // 1 year in seconds\r\n          },\r\n          (err, token) => {\r\n            return res.status(200).json({\r\n              status: 200,\r\n              message: 'เข้าสู่ระบบสำเร็จ ',\r\n              token: token,\r\n              // bytes\r\n            });\r\n          },\r\n        );\r\n      } else {\r\n        return res.status(200).json({ status: 402, message: 'ชื่อผู้ใช้หรือรหัสผ่านผิด' });\r\n      }\r\n    });\r\n  });\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}