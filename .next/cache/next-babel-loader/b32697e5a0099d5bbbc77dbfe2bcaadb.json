{"ast":null,"code":"import nextConnect from 'next-connect';\n\nconst models = require('../../../db/models/index');\n\nimport middleware from '../../../middleware/auth';\nimport moment from 'moment';\nimport { absoluteUrl, checkIsLogin, getIPAddress, convertDatetoAddDB } from '../../../middleware/utils';\n\nconst Sequelize = require('sequelize');\n\nconst Op = Sequelize.Op;\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {}).post(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const {\n    menu_id,\n    menu_title,\n    menu_detail,\n    menu_seq,\n    is_show,\n    is_pattern_menu,\n    pattern_menu\n  } = body; //SampleText.replace(\"Developer\", \"App Builder\");\n\n  const dataMenu = {\n    menu_id: menu_id,\n    menu_title: menu_title,\n    menu_detail: menu_detail,\n    menu_seq: menu_seq,\n    is_show: is_show,\n    is_pattern_menu: is_pattern_menu,\n    pattern_menu: pattern_menu\n  };\n\n  if (menu_id == undefined || menu_title == undefined || menu_detail == undefined || menu_seq == undefined || is_show == undefined || is_pattern_menu == undefined || pattern_menu == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      dataMenu: dataMenu\n    });\n  }\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format();\n  dataMenu.ip = ip;\n  dataMenu.is_deleted = 0;\n  dataMenu.date_created = currentDate.replace(\"+07:00\", \"+00:00\");\n  dataMenu.date_updated = currentDate.replace(\"+07:00\", \"+00:00\"); // console.log(dataIntro)\n\n  const newMenu = await models.Menu_sub.create(dataMenu);\n\n  if (newMenu == null) {\n    return res.status(500).json({\n      status: 500,\n      message: 'Internal error'\n    });\n  }\n\n  return res.status(200).json({\n    status: 200,\n    message: 'บันทึกข้อมูลสำเร็จ'\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/menu/menu-sub.js"],"names":["nextConnect","models","require","middleware","moment","absoluteUrl","checkIsLogin","getIPAddress","convertDatetoAddDB","Sequelize","Op","handler","use","get","req","res","post","body","slug","query","menu_id","menu_title","menu_detail","menu_seq","is_show","is_pattern_menu","pattern_menu","dataMenu","undefined","status","json","message","ip","currentDate","format","is_deleted","date_created","replace","date_updated","newMenu","Menu_sub","create"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAAC,0BAAD,CAAtB;;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,YAApC,EAAkDC,kBAAlD,QAA4E,2BAA5E;;AACA,MAAMC,SAAS,GAAGP,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMQ,EAAE,GAAGD,SAAS,CAACC,EAArB;AAEA,MAAMC,OAAO,GAAGX,WAAW,GACzB;AADyB,CAExBY,GAFa,CAETT,UAFS,EAGd;AAHc,CAIbU,GAJa,CAIT,OAAOC,GAAP,EAAYC,GAAZ,KAAoB,CAExB,CANa,EAObC,IAPa,CAOR,OAAOF,GAAP,EAAYC,GAAZ,KAAoB;AACxB,QAAM;AAAEE,IAAAA;AAAF,MAAWH,GAAjB;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAWJ,GAAG,CAACK,KAArB;AACA,QAAM;AACJC,IAAAA,OADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,OALI;AAMJC,IAAAA,eANI;AAOJC,IAAAA;AAPI,MAQFT,IARJ,CAHwB,CAYxB;;AACA,QAAMU,QAAQ,GAAG;AACfP,IAAAA,OAAO,EAAEA,OADM;AAEfC,IAAAA,UAAU,EAAEA,UAFG;AAGfC,IAAAA,WAAW,EAAEA,WAHE;AAIfC,IAAAA,QAAQ,EAAEA,QAJK;AAKfC,IAAAA,OAAO,EAAEA,OALM;AAMfC,IAAAA,eAAe,EAAEA,eANF;AAOfC,IAAAA,YAAY,EAAEA;AAPC,GAAjB;;AAUA,MACEN,OAAO,IAAIQ,SAAX,IACAP,UAAU,IAAIO,SADd,IAC2BN,WAAW,IAAIM,SAD1C,IAEAL,QAAQ,IAAIK,SAFZ,IAGAJ,OAAO,IAAII,SAHX,IAIAH,eAAe,IAAIG,SAJnB,IAIgCF,YAAY,IAAIE,SALlD,EAME;AACA,WAAOb,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,MAAAA,MAAM,EAAE,GADkB;AAE1BE,MAAAA,OAAO,EAAE,gBAFiB;AAG1BJ,MAAAA,QAAQ,EAAEA;AAHgB,KAArB,CAAP;AAKD;;AACD,MAAIK,EAAE,GAAG,MAAMzB,YAAY,EAA3B;AACA,MAAI0B,WAAW,GAAG7B,MAAM,GAAG8B,MAAT,EAAlB;AACAP,EAAAA,QAAQ,CAACK,EAAT,GAAcA,EAAd;AACAL,EAAAA,QAAQ,CAACQ,UAAT,GAAsB,CAAtB;AACAR,EAAAA,QAAQ,CAACS,YAAT,GAAwBH,WAAW,CAACI,OAAZ,CAAoB,QAApB,EAA8B,QAA9B,CAAxB;AACAV,EAAAA,QAAQ,CAACW,YAAT,GAAwBL,WAAW,CAACI,OAAZ,CAAoB,QAApB,EAA8B,QAA9B,CAAxB,CAzCwB,CA4CxB;;AACA,QAAME,OAAO,GAAG,MAAMtC,MAAM,CAACuC,QAAP,CAAgBC,MAAhB,CAAuBd,QAAvB,CAAtB;;AAEA,MAAIY,OAAO,IAAI,IAAf,EAAqB;AACnB,WAAOxB,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,MAAAA,MAAM,EAAE,GADkB;AAE1BE,MAAAA,OAAO,EAAE;AAFiB,KAArB,CAAP;AAID;;AACD,SAAOhB,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,IAAAA,MAAM,EAAE,GADkB;AAE1BE,IAAAA,OAAO,EAAE;AAFiB,GAArB,CAAP;AAID,CAhEa,CAAhB;AAoEA,eAAepB,OAAf","sourcesContent":["import nextConnect from 'next-connect';\r\n\r\nconst models = require('../../../db/models/index');\r\nimport middleware from '../../../middleware/auth';\r\nimport moment from 'moment';\r\nimport { absoluteUrl, checkIsLogin, getIPAddress, convertDatetoAddDB } from '../../../middleware/utils';\r\nconst Sequelize = require('sequelize');\r\nconst Op = Sequelize.Op;\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n   \r\n  })\r\n  .post(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const {\r\n      menu_id,\r\n      menu_title,\r\n      menu_detail,\r\n      menu_seq,\r\n      is_show,\r\n      is_pattern_menu,\r\n      pattern_menu,\r\n    } = body;\r\n    //SampleText.replace(\"Developer\", \"App Builder\");\r\n    const dataMenu = {\r\n      menu_id: menu_id,\r\n      menu_title: menu_title,\r\n      menu_detail: menu_detail,\r\n      menu_seq: menu_seq,\r\n      is_show: is_show,\r\n      is_pattern_menu: is_pattern_menu,\r\n      pattern_menu: pattern_menu,\r\n    };\r\n\r\n    if (\r\n      menu_id == undefined ||\r\n      menu_title == undefined || menu_detail == undefined ||\r\n      menu_seq == undefined ||\r\n      is_show == undefined || \r\n      is_pattern_menu == undefined || pattern_menu == undefined\r\n    ) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        dataMenu: dataMenu\r\n      });\r\n    }\r\n    var ip = await getIPAddress()\r\n    var currentDate = moment().format()\r\n    dataMenu.ip = ip\r\n    dataMenu.is_deleted = 0\r\n    dataMenu.date_created = currentDate.replace(\"+07:00\", \"+00:00\")\r\n    dataMenu.date_updated = currentDate.replace(\"+07:00\", \"+00:00\")\r\n\r\n\r\n    // console.log(dataIntro)\r\n    const newMenu = await models.Menu_sub.create(dataMenu);\r\n\r\n    if (newMenu == null) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        message: 'Internal error',\r\n      });\r\n    }\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'บันทึกข้อมูลสำเร็จ',\r\n    });\r\n  });\r\n \r\n  \r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}