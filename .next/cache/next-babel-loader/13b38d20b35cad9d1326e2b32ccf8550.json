{"ast":null,"code":"import moment from 'moment';\nimport nextConnect from 'next-connect';\nimport middleware from '../../../middleware/auth';\nimport { getIPAddress } from '../../../middleware/utils';\n\nconst models = require('../../../db/models/index');\n\nconst Sequelize = require('sequelize');\n\nconst Op = Sequelize.Op;\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  const {\n    query: {\n      id,\n      name\n    }\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const complain_id = slug;\n  const complain = await models.complain.findOne({\n    where: {\n      complain_id: complain_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: \"success\",\n    complain: complain ? complain : []\n  });\n}).put(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const complain_id = slug;\n  const {\n    organization_id,\n    is_done\n  } = body; //SampleText.replace(\"Developer\", \"App Builder\");\n\n  const dataComplain = {\n    organization_id: organization_id,\n    is_done: is_done\n  };\n\n  if (organization_id == undefined || is_done == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      complain_id: complain_id,\n      data: dataComplain\n    });\n  }\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format();\n  dataComplain.ip = ip;\n  dataComplain.date_update = currentDate.replace(\"+07:00\", \"+00:00\");\n  const complainDataResult = await models.complain.update(dataComplain, {\n    where: {\n      complain_id: complain_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success' // organization: organization ? organization : []\n\n  }); // await User.update({ lastName: \"Doe\" }, {\n  //   where: {\n  //     lastName: null\n  //   }\n  // });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/complain/[slug].js"],"names":["moment","nextConnect","middleware","getIPAddress","models","require","Sequelize","Op","handler","use","get","req","res","query","id","name","slug","complain_id","complain","findOne","where","status","json","message","put","body","organization_id","is_done","dataComplain","undefined","data","ip","currentDate","format","date_update","replace","complainDataResult","update"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,YAAT,QAA6B,2BAA7B;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,0BAAD,CAAtB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAME,EAAE,GAAGD,SAAS,CAACC,EAArB;AAEA,MAAMC,OAAO,GAAGP,WAAW,GACzB;AADyB,CAExBQ,GAFa,CAETP,UAFS,EAGd;AAHc,CAIbQ,GAJa,CAIT,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACvB,QAAM;AACJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,EAAF;AAAMC,MAAAA;AAAN;AADH,MAEFJ,GAFJ;AAGA,QAAM;AAAEK,IAAAA;AAAF,MAAWL,GAAG,CAACE,KAArB;AACA,QAAMI,WAAW,GAAGD,IAApB;AAEA,QAAME,QAAQ,GAAG,MAAMd,MAAM,CAACc,QAAP,CAAgBC,OAAhB,CAAwB;AAC7CC,IAAAA,KAAK,EAAE;AACLH,MAAAA,WAAW,EAAEA;AADR;AADsC,GAAxB,CAAvB;AAQA,SAAOL,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,IAAAA,MAAM,EAAE,GADkB;AAE1BE,IAAAA,OAAO,EAAE,SAFiB;AAG1BL,IAAAA,QAAQ,EAAEA,QAAQ,GAAGA,QAAH,GAAc;AAHN,GAArB,CAAP;AAKD,CAxBa,EAyBbM,GAzBa,CAyBT,OAAOb,GAAP,EAAYC,GAAZ,KAAoB;AACvB,QAAM;AAAEa,IAAAA;AAAF,MAAWd,GAAjB;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAWL,GAAG,CAACE,KAArB;AACA,QAAMI,WAAW,GAAGD,IAApB;AACA,QAAM;AACJU,IAAAA,eADI;AAEJC,IAAAA;AAFI,MAGFF,IAHJ,CAJuB,CASvB;;AACA,QAAMG,YAAY,GAAG;AACnBF,IAAAA,eAAe,EAAEA,eADE;AAEnBC,IAAAA,OAAO,EAAEA;AAFU,GAArB;;AAKA,MACED,eAAe,IAAIG,SAAnB,IACAF,OAAO,IAAIE,SAFb,EAGE;AACA,WAAOjB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,MAAAA,MAAM,EAAE,GADkB;AAE1BE,MAAAA,OAAO,EAAE,gBAFiB;AAG1BN,MAAAA,WAAW,EAAEA,WAHa;AAI1Ba,MAAAA,IAAI,EAAEF;AAJoB,KAArB,CAAP;AAMD;;AAED,MAAIG,EAAE,GAAG,MAAM5B,YAAY,EAA3B;AACA,MAAI6B,WAAW,GAAGhC,MAAM,GAAGiC,MAAT,EAAlB;AACAL,EAAAA,YAAY,CAACG,EAAb,GAAkBA,EAAlB;AACAH,EAAAA,YAAY,CAACM,WAAb,GAA2BF,WAAW,CAACG,OAAZ,CAAoB,QAApB,EAA8B,QAA9B,CAA3B;AAEA,QAAMC,kBAAkB,GAAG,MAAMhC,MAAM,CAACc,QAAP,CAAgBmB,MAAhB,CAAuBT,YAAvB,EAAqC;AACpER,IAAAA,KAAK,EAAE;AACLH,MAAAA,WAAW,EAAEA;AADR;AAD6D,GAArC,CAAjC;AAMA,SAAOL,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,IAAAA,MAAM,EAAE,GADkB;AAE1BE,IAAAA,OAAO,EAAE,SAFiB,CAG1B;;AAH0B,GAArB,CAAP,CAtCuB,CA4CvB;AACA;AACA;AACA;AACA;AACD,CA1Ea,CAAhB;AA4EA,eAAef,OAAf","sourcesContent":["import moment from 'moment';\r\nimport nextConnect from 'next-connect';\r\nimport middleware from '../../../middleware/auth';\r\nimport { getIPAddress } from '../../../middleware/utils';\r\nconst models = require('../../../db/models/index');\r\nconst Sequelize = require('sequelize');\r\nconst Op = Sequelize.Op;\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    const {\r\n      query: { id, name },\r\n    } = req;\r\n    const { slug } = req.query;\r\n    const complain_id = slug;\r\n\r\n    const complain = await models.complain.findOne({\r\n      where: {\r\n        complain_id: complain_id,\r\n      },\r\n\r\n    });\r\n\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: \"success\",\r\n      complain: complain ? complain : []\r\n    });\r\n  })\r\n  .put(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const complain_id = slug;\r\n    const {\r\n      organization_id,\r\n      is_done\r\n    } = body;\r\n\r\n    //SampleText.replace(\"Developer\", \"App Builder\");\r\n    const dataComplain = {\r\n      organization_id: organization_id,\r\n      is_done: is_done,\r\n    };\r\n\r\n    if (\r\n      organization_id == undefined ||\r\n      is_done == undefined\r\n    ) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        complain_id: complain_id,\r\n        data: dataComplain,\r\n      });\r\n    }\r\n\r\n    var ip = await getIPAddress()\r\n    var currentDate = moment().format()\r\n    dataComplain.ip = ip\r\n    dataComplain.date_update = currentDate.replace(\"+07:00\", \"+00:00\")\r\n\r\n    const complainDataResult = await models.complain.update(dataComplain, {\r\n      where: {\r\n        complain_id: complain_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      // organization: organization ? organization : []\r\n    });\r\n\r\n    // await User.update({ lastName: \"Doe\" }, {\r\n    //   where: {\r\n    //     lastName: null\r\n    //   }\r\n    // });\r\n  })\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}