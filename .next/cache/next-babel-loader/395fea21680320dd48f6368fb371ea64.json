{"ast":null,"code":"import nextConnect from 'next-connect';\n\nconst models = require('../../../db/models/index');\n\nimport middleware from '../../../middleware/auth';\nimport { addDays } from '../../../middleware/utils';\n\nconst bcrypt = require('bcryptjs');\n\nconst salt = bcrypt.genSaltSync(10);\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  return res.status(400).json({\n    status: 400,\n    message: 'deny permission!!'\n  });\n}) // Post method\n.post(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const {\n    organization_name,\n    name_user,\n    organization_phone,\n    thumbnail_url,\n    organization_email,\n    password\n  } = body; // const userId = slug;\n\n  var myCurrentDate = new Date();\n  var myFutureDate = new Date(myCurrentDate);\n  myFutureDate.setDate(myFutureDate.getDate() + 8);\n  const dataUser = {\n    organization_name,\n    organization_phone,\n    thumbnail_url,\n    organization_email,\n    // password,\n    is_use: 1,\n    package: 1,\n    theme: 1,\n    organization_sub_district_id: 501508,\n    date_expired: addDays(myCurrentDate, 31)\n  };\n\n  if (organization_name == undefined || name_user == undefined || organization_phone == undefined || thumbnail_url == undefined || organization_email == undefined || password == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      dataUser: dataUser\n    });\n  } // const user = await User.create({\n  //   username: 'alice123',\n  //   isAdmin: true\n  // }, { fields: ['username'] });\n\n\n  const dataOrganization = await models.Organization.findOne({\n    where: {\n      organization_email: organization_email\n    },\n    attributes: ['organization_id', 'organization_email']\n  });\n\n  if (dataOrganization != null) {\n    return res.status(200).json({\n      status: 202,\n      message: 'data user \"email\" is exist'\n    });\n  }\n\n  const dataUsers = await models.Users.findOne({\n    where: {\n      user_name: organization_email\n    }\n  });\n\n  if (dataUsers != null) {\n    return res.status(200).json({\n      status: 203,\n      message: 'data user \"email\" is exist'\n    });\n  }\n\n  const newOrganization = await models.Organization.create(dataUser);\n\n  if (newOrganization == null) {\n    return res.status(500).json({\n      status: 500,\n      message: 'Internal error'\n    });\n  }\n\n  console.log(\"newOrganization\");\n  console.log(newOrganization);\n  const dataUser2 = {\n    user_name: organization_email,\n    password: bcrypt.hashSync(password, salt),\n    name_user,\n    organization_id: newOrganization.null,\n    email_user: organization_email,\n    phone_user: organization_phone\n  };\n  const newUser = await models.Users.create(dataUser2);\n\n  if (newUser == null) {\n    return res.status(500).json({\n      status: 500,\n      message: 'Internal error'\n    });\n  }\n\n  return res.status(200).json({\n    status: 200,\n    message: 'Insert completed'\n  }); // .then(([_user, created]) => {\n  //   // console.log(_user.get({\n  //   //   plain: true\n  //   // }))\n  //   console.log(\"created\")\n  //   console.log(created)\n  //   console.log(\"_user\")\n  //   console.log(_user.dataValues)\n  //   if (!created) {\n  //     return res.status(200).json({\n  //       status: 202,\n  //       message: 'data user is exist.',\n  //     });\n  //   }\n  //   return res.status(200).json({\n  //     status: 'success',\n  //     message: 'done',\n  //     // dataRequest: dataUser,\n  //     dataResult: _user.dataValues,\n  //   });\n  //   //user data\n  //   const dataUser2 = {\n  //     user_name: organization_email,\n  //     password,\n  //     name_user,\n  //     organization_id: _user.dataValues.organization_id,\n  //     email_user: organization_email,\n  //     phone_user: organization_phone,\n  //   };\n  // await models.Users.findOrCreate({ where: { user_name: organization_email }, defaults: dataUser2 })\n  //   .then(([_user2, created2]) => {\n  //     console.log(\"created2\")\n  //     console.log(created2)\n  //     console.log(\"_user2\")\n  //     console.log(_user2)\n  //     if (!created2) {\n  //       return res.status(200).json({\n  //         status: 202,\n  //         message: 'data user \"email\" is exist.',\n  //       });\n  //     }\n  //     return res.status(200).json({\n  //       status: 'success',\n  //       message: 'done',\n  //       // dataRequest: dataUser,\n  //       // dataResult: _user.Organization.dataValues,\n  //     });\n  //   })\n  // })\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/organization/register.js"],"names":["nextConnect","models","require","middleware","addDays","bcrypt","salt","genSaltSync","handler","use","get","req","res","status","json","message","post","body","slug","query","organization_name","name_user","organization_phone","thumbnail_url","organization_email","password","myCurrentDate","Date","myFutureDate","setDate","getDate","dataUser","is_use","package","theme","organization_sub_district_id","date_expired","undefined","dataOrganization","Organization","findOne","where","attributes","dataUsers","Users","user_name","newOrganization","create","console","log","dataUser2","hashSync","organization_id","null","email_user","phone_user","newUser"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\r\nconst models = require('../../../db/models/index');\r\nimport middleware from '../../../middleware/auth';\r\nimport { addDays } from '../../../middleware/utils';\r\nconst bcrypt = require('bcryptjs');\r\nconst salt = bcrypt.genSaltSync(10);\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    return res.status(400).json({\r\n      status: 400,\r\n      message: 'deny permission!!',\r\n    });\r\n  })\r\n  // Post method\r\n  .post(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const { organization_name, name_user, organization_phone, thumbnail_url, organization_email, password } = body;\r\n    // const userId = slug;\r\n\r\n\r\n    var myCurrentDate = new Date();\r\n    var myFutureDate = new Date(myCurrentDate);\r\n    myFutureDate.setDate(myFutureDate.getDate() + 8);\r\n\r\n    const dataUser = {\r\n      organization_name,\r\n      organization_phone,\r\n      thumbnail_url,\r\n      organization_email,\r\n      // password,\r\n      is_use: 1,\r\n      package: 1,\r\n      theme: 1,\r\n      organization_sub_district_id : 501508,\r\n      date_expired: addDays(myCurrentDate, 31)\r\n    };\r\n\r\n    if (organization_name == undefined || name_user == undefined || organization_phone == undefined || thumbnail_url == undefined || organization_email == undefined || password == undefined) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        dataUser: dataUser\r\n      });\r\n    }\r\n    // const user = await User.create({\r\n    //   username: 'alice123',\r\n    //   isAdmin: true\r\n    // }, { fields: ['username'] });\r\n    const dataOrganization = await models.Organization.findOne({\r\n      where: { organization_email: organization_email },\r\n      attributes: ['organization_id', 'organization_email'],\r\n    });\r\n    if (dataOrganization != null) {\r\n      return res.status(200).json({\r\n        status: 202,\r\n        message: 'data user \"email\" is exist',\r\n      });\r\n    }\r\n\r\n    const dataUsers = await models.Users.findOne({ where: { user_name: organization_email } });\r\n    if (dataUsers != null) {\r\n      return res.status(200).json({\r\n        status: 203,\r\n        message: 'data user \"email\" is exist',\r\n      });\r\n    }\r\n\r\n    const newOrganization = await models.Organization.create(dataUser);\r\n\r\n    if (newOrganization == null) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        message: 'Internal error',\r\n      });\r\n    }\r\n\r\n    console.log(\"newOrganization\")\r\n    console.log(newOrganization)\r\n    const dataUser2 = {\r\n      user_name: organization_email,\r\n      password: bcrypt.hashSync(password, salt),\r\n      name_user,\r\n      organization_id: newOrganization.null,\r\n      email_user: organization_email,\r\n      phone_user: organization_phone,\r\n    };\r\n\r\n    const newUser = await models.Users.create(dataUser2);\r\n\r\n\r\n    if (newUser == null) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        message: 'Internal error',\r\n      });\r\n    }\r\n\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'Insert completed',\r\n    });\r\n    // .then(([_user, created]) => {\r\n    //   // console.log(_user.get({\r\n    //   //   plain: true\r\n    //   // }))\r\n    //   console.log(\"created\")\r\n    //   console.log(created)\r\n    //   console.log(\"_user\")\r\n    //   console.log(_user.dataValues)\r\n\r\n    //   if (!created) {\r\n    //     return res.status(200).json({\r\n    //       status: 202,\r\n    //       message: 'data user is exist.',\r\n    //     });\r\n    //   }\r\n\r\n    //   return res.status(200).json({\r\n    //     status: 'success',\r\n    //     message: 'done',\r\n    //     // dataRequest: dataUser,\r\n    //     dataResult: _user.dataValues,\r\n    //   });\r\n    //   //user data\r\n    //   const dataUser2 = {\r\n    //     user_name: organization_email,\r\n    //     password,\r\n    //     name_user,\r\n    //     organization_id: _user.dataValues.organization_id,\r\n    //     email_user: organization_email,\r\n    //     phone_user: organization_phone,\r\n    //   };\r\n\r\n    // await models.Users.findOrCreate({ where: { user_name: organization_email }, defaults: dataUser2 })\r\n    //   .then(([_user2, created2]) => {\r\n\r\n    //     console.log(\"created2\")\r\n    //     console.log(created2)\r\n    //     console.log(\"_user2\")\r\n    //     console.log(_user2)\r\n\r\n    //     if (!created2) {\r\n    //       return res.status(200).json({\r\n    //         status: 202,\r\n    //         message: 'data user \"email\" is exist.',\r\n    //       });\r\n    //     }\r\n    //     return res.status(200).json({\r\n    //       status: 'success',\r\n    //       message: 'done',\r\n    //       // dataRequest: dataUser,\r\n    //       // dataResult: _user.Organization.dataValues,\r\n    //     });\r\n    //   })\r\n\r\n    // })\r\n\r\n\r\n\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}