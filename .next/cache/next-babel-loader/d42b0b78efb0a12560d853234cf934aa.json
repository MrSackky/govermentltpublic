{"ast":null,"code":"import moment from 'moment';\nimport nextConnect from 'next-connect';\nimport middleware from '../../../middleware/auth';\nimport { getIPAddress } from '../../../middleware/utils';\n\nconst models = require('../../../db/models/index');\n\nconst Sequelize = require('sequelize');\n\nconst Op = Sequelize.Op;\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  const {\n    query: {\n      id,\n      name\n    }\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const file_id = slug;\n  const documents = await models.store_documents.findOne({\n    where: {\n      file_id: file_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success',\n    documents: documents ? documents : []\n  });\n}).put(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const file_id = slug;\n  const {\n    organization_id,\n    file_name,\n    file_name_ori,\n    file_subject,\n    file_url,\n    is_show,\n    download,\n    is_deleted\n  } = body; //SampleText.replace(\"Developer\", \"App Builder\");\n\n  const dataDocuments = {\n    \"organization_id\": organization_id,\n    \"file_name\": file_name,\n    \"file_name_ori\": file_name_ori,\n    \"file_subject\": file_subject,\n    \"file_url\": file_url,\n    \"is_show\": is_show,\n    \"download\": download,\n    \"is_deleted\": is_deleted\n  };\n\n  if (organization_id == undefined || file_name == undefined || file_name_ori == undefined || file_subject == undefined || file_url == undefined || download == undefined || is_deleted == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      file_id: file_id,\n      data: dataDocuments\n    });\n  }\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format();\n  dataDocuments.ip = ip;\n  dataDocuments.is_deleted = 0;\n  dataDocuments.date_update = currentDate.replace(\"+07:00\", \"+00:00\");\n  const documentsDataResult = await models.store_documents.update(dataDocuments, {\n    where: {\n      file_id: file_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success' // organization: organization ? organization : []\n\n  }); // await User.update({ lastName: \"Doe\" }, {\n  //   where: {\n  //     lastName: null\n  //   }\n  // });\n}).delete(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const file_id = slug;\n\n  if (file_id == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      file_id: file_id\n    });\n  }\n\n  const dataDocuments = {\n    is_deleted: 1\n  };\n  const documents = await models.store_documents.update(dataDocuments, {\n    where: {\n      file_id: file_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success',\n    documents: documents ? documents : []\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/documents/[slug].js"],"names":["moment","nextConnect","middleware","getIPAddress","models","require","Sequelize","Op","handler","use","get","req","res","query","id","name","slug","file_id","documents","store_documents","findOne","where","status","json","message","put","body","organization_id","file_name","file_name_ori","file_subject","file_url","is_show","download","is_deleted","dataDocuments","undefined","data","ip","currentDate","format","date_update","replace","documentsDataResult","update","delete"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport nextConnect from 'next-connect';\r\nimport middleware from '../../../middleware/auth';\r\nimport { getIPAddress } from '../../../middleware/utils';\r\nconst models = require('../../../db/models/index');\r\nconst Sequelize = require('sequelize');\r\nconst Op = Sequelize.Op;\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    const {\r\n      query: { id, name },\r\n    } = req;\r\n    const { slug } = req.query;\r\n    const file_id = slug;\r\n\r\n    const documents = await models.store_documents.findOne({\r\n      where: {\r\n        file_id: file_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      documents: documents ? documents : [],\r\n    });\r\n  })\r\n  .put(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const file_id = slug;\r\n    const {\r\n      organization_id,\r\n      file_name,\r\n      file_name_ori,\r\n      file_subject,\r\n      file_url,\r\n      is_show,\r\n      download,\r\n      is_deleted,\r\n    } = body;\r\n\r\n    //SampleText.replace(\"Developer\", \"App Builder\");\r\n    const dataDocuments = {\r\n      \"organization_id\": organization_id,\r\n      \"file_name\": file_name,\r\n      \"file_name_ori\": file_name_ori,\r\n      \"file_subject\": file_subject,\r\n      \"file_url\": file_url,\r\n      \"is_show\": is_show,\r\n      \"download\": download,\r\n      \"is_deleted\": is_deleted,\r\n    };\r\n\r\n    if (\r\n      organization_id == undefined ||\r\n      file_name == undefined ||\r\n      file_name_ori == undefined ||\r\n      file_subject == undefined ||\r\n      file_url == undefined ||\r\n      download == undefined ||\r\n      is_deleted == undefined\r\n    ) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        file_id: file_id,\r\n        data: dataDocuments,\r\n      });\r\n    }\r\n\r\n    var ip = await getIPAddress()\r\n    var currentDate = moment().format()\r\n    dataDocuments.ip = ip\r\n    dataDocuments.is_deleted = 0\r\n    dataDocuments.date_update = currentDate.replace(\"+07:00\", \"+00:00\")\r\n\r\n    const documentsDataResult = await models.store_documents.update(dataDocuments, {\r\n      where: {\r\n        file_id: file_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      // organization: organization ? organization : []\r\n    });\r\n\r\n    // await User.update({ lastName: \"Doe\" }, {\r\n    //   where: {\r\n    //     lastName: null\r\n    //   }\r\n    // });\r\n  })\r\n  .delete(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const file_id = slug;\r\n    if (file_id == undefined) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        file_id: file_id,\r\n      });\r\n    }\r\n\r\n    const dataDocuments = {\r\n      is_deleted: 1,\r\n    };\r\n\r\n    const documents = await models.store_documents.update(dataDocuments, {\r\n      where: {\r\n        file_id: file_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      documents: documents ? documents : [],\r\n    });\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}