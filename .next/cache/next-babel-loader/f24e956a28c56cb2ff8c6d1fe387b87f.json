{"ast":null,"code":"import nextConnect from 'next-connect';\n\nconst models = require('../../../db/models/index');\n\nimport middleware from '../../../middleware/auth';\nimport { addDays, getIPAddress } from '../../../middleware/utils';\n\nconst Sequelize = require('sequelize');\n\nconst Op = Sequelize.Op;\nimport moment from 'moment';\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  const {\n    query: {\n      id,\n      name\n    }\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const infor_id = slug;\n  const information = await models.information.findOne({\n    where: {\n      infor_id: infor_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success',\n    information: information ? information : []\n  });\n}).put(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const infor_id = slug;\n  const {\n    infor_date,\n    infor_title,\n    infor_detail,\n    infor_image,\n    infor_keyword,\n    infor_view,\n    status_active\n  } = body; //SampleText.replace(\"Developer\", \"App Builder\");\n\n  const dataInfor = {\n    infor_title: infor_title,\n    infor_detail: infor_detail,\n    infor_date: infor_date.replace('+07:00', '+00:00'),\n    infor_image: infor_image,\n    infor_keyword: infor_keyword,\n    infor_view: infor_view,\n    status_active: status_active\n  };\n\n  if (infor_title == undefined || infor_detail == undefined || infor_date == undefined || infor_image == undefined || infor_keyword == undefined || infor_view == undefined || status_active == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      infor_id: infor_id,\n      data: dataInfor\n    });\n  }\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format();\n  dataInfor.ip = ip;\n  dataInfor.is_deleted = 0;\n  dataInfor.date_update = currentDate.replace(\"+07:00\", \"+00:00\");\n  const inforDataResult = await models.information.update(dataInfor, {\n    where: {\n      infor_id: infor_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success' // organization: organization ? organization : []\n\n  }); // await User.update({ lastName: \"Doe\" }, {\n  //   where: {\n  //     lastName: null\n  //   }\n  // });\n}).delete(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const infor_id = slug;\n\n  if (infor_id == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      infor_id: infor_id\n    });\n  }\n\n  const dataInformation = {\n    is_deleted: 1\n  };\n  const information = await models.information.update(dataInformation, {\n    where: {\n      infor_id: infor_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success',\n    information: information ? information : []\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/information/[slug].js"],"names":["nextConnect","models","require","middleware","addDays","getIPAddress","Sequelize","Op","moment","handler","use","get","req","res","query","id","name","slug","infor_id","information","findOne","where","status","json","message","put","body","infor_date","infor_title","infor_detail","infor_image","infor_keyword","infor_view","status_active","dataInfor","replace","undefined","data","ip","currentDate","format","is_deleted","date_update","inforDataResult","update","delete","dataInformation"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\r\nconst models = require('../../../db/models/index');\r\nimport middleware from '../../../middleware/auth';\r\nimport { addDays , getIPAddress } from '../../../middleware/utils';\r\nconst Sequelize = require('sequelize');\r\nconst Op = Sequelize.Op;\r\nimport moment from 'moment';\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    const {\r\n      query: { id, name },\r\n    } = req;\r\n    const { slug } = req.query;\r\n    const infor_id = slug;\r\n\r\n    const information = await models.information.findOne({\r\n      where: {\r\n        infor_id: infor_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      information: information ? information : [],\r\n    });\r\n  })\r\n  .put(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const infor_id = slug;\r\n    const {\r\n      infor_date,\r\n      infor_title,\r\n      infor_detail,\r\n      infor_image,\r\n      infor_keyword,\r\n      infor_view,\r\n      status_active,\r\n    } = body;\r\n\r\n    //SampleText.replace(\"Developer\", \"App Builder\");\r\n    const dataInfor = {\r\n      infor_title: infor_title,\r\n      infor_detail: infor_detail,\r\n      infor_date: infor_date.replace('+07:00', '+00:00'),\r\n      infor_image: infor_image,\r\n      infor_keyword: infor_keyword,\r\n      infor_view: infor_view,\r\n      status_active: status_active,\r\n    };\r\n\r\n    if (\r\n      infor_title == undefined ||\r\n      infor_detail == undefined ||\r\n      infor_date == undefined ||\r\n      infor_image == undefined ||\r\n      infor_keyword == undefined ||\r\n      infor_view == undefined ||\r\n      status_active == undefined\r\n    ) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        infor_id: infor_id,\r\n        data: dataInfor,\r\n      });\r\n    }\r\n\r\n    var ip = await getIPAddress()\r\n    var currentDate = moment().format()\r\n    dataInfor.ip = ip\r\n    dataInfor.is_deleted = 0\r\n    dataInfor.date_update = currentDate.replace(\"+07:00\", \"+00:00\")\r\n\r\n    const inforDataResult = await models.information.update(dataInfor, {\r\n      where: {\r\n        infor_id: infor_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      // organization: organization ? organization : []\r\n    });\r\n\r\n    // await User.update({ lastName: \"Doe\" }, {\r\n    //   where: {\r\n    //     lastName: null\r\n    //   }\r\n    // });\r\n  })\r\n  .delete(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const infor_id = slug;\r\n    if (infor_id == undefined) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        infor_id: infor_id,\r\n      });\r\n    }\r\n\r\n    const dataInformation = {\r\n      is_deleted: 1,\r\n    };\r\n\r\n    const information = await models.information.update(dataInformation, {\r\n      where: {\r\n        infor_id: infor_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      information: information ? information : [],\r\n    });\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}