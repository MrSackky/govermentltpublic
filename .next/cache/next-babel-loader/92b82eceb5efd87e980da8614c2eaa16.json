{"ast":null,"code":"import nextConnect from 'next-connect';\n\nconst models = require('../../../../../db/models/index');\n\nimport { absoluteUrl, checkIsLogin, getIPAddress, convertDatetoAddDB } from '../../../../../middleware/utils';\nimport moment from 'moment';\nconst handler = nextConnect().get(async (req, res) => {\n  const {\n    query: {\n      id,\n      name\n    }\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const intro_id = slug;\n  console.log(intro_id);\n  const introData = await models.intro.findOne({\n    where: {\n      intro_id: intro_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: \"success\",\n    introData: introData ? introData : []\n  });\n}).post(async (req, res) => {}).put(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const intro_id = slug;\n  const {\n    intro_title,\n    intro_url,\n    intro_btn,\n    intro_date_s,\n    intro_date_e,\n    intro_image,\n    is_has_bless,\n    is_admin,\n    is_use\n  } = body; //SampleText.replace(\"Developer\", \"App Builder\");\n\n  const dataIntro = {\n    intro_title: intro_title,\n    intro_url: intro_url ? intro_url : \"\",\n    intro_btn: intro_btn ? intro_btn : \"\",\n    intro_date_s: intro_date_s.replace(\"+07:00\", \"+00:00\"),\n    intro_date_e: intro_date_e.replace(\"+07:00\", \"+00:00\"),\n    intro_image: intro_image,\n    is_has_bless: is_has_bless,\n    is_admin: is_admin,\n    is_use: is_use\n  };\n\n  if (intro_id == undefined || intro_url == undefined || intro_btn == undefined || intro_date_s == undefined || intro_date_s == undefined || intro_image == undefined || is_has_bless == undefined || is_admin == undefined || is_use == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      intro_id: intro_id,\n      data: dataIntro\n    });\n  }\n\n  const introDataResult = await models.intro.update(dataIntro, {\n    where: {\n      intro_id: intro_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: \"success\" // organization: organization ? organization : []\n\n  }); // await User.update({ lastName: \"Doe\" }, {\n  //   where: {\n  //     lastName: null\n  //   }\n  // });\n}).delete(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const intro_id = slug;\n\n  if (intro_id == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      intro_id: intro_id\n    });\n  }\n\n  var currentDate = moment().format(); // dataIntro.ip = ip\n  // dataIntro.is_deleted = 0\n  // dataIntro.date_created = currentDate.replace(\"+07:00\", \"+00:00\")\n  // dataIntro.date_updated = currentDate.replace(\"+07:00\", \"+00:00\")\n\n  const dataOrganization = {\n    is_deleted: 1,\n    date_updated: currentDate.replace(\"+07:00\", \"+00:00\")\n  };\n  const intros = await models.intro.update(dataOrganization, {\n    where: {\n      intro_id: intro_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: \"success\" // organization: organization ? organization : []\n\n  });\n}).patch(async (req, res) => {});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/admin/management/landing-page/[slug].js"],"names":["nextConnect","models","require","absoluteUrl","checkIsLogin","getIPAddress","convertDatetoAddDB","moment","handler","get","req","res","query","id","name","slug","intro_id","console","log","introData","intro","findOne","where","status","json","message","post","put","body","intro_title","intro_url","intro_btn","intro_date_s","intro_date_e","intro_image","is_has_bless","is_admin","is_use","dataIntro","replace","undefined","data","introDataResult","update","delete","currentDate","format","dataOrganization","is_deleted","date_updated","intros","patch"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\r\nconst models = require('../../../../../db/models/index');\r\nimport { absoluteUrl, checkIsLogin, getIPAddress, convertDatetoAddDB } from '../../../../../middleware/utils';\r\nimport moment from 'moment';\r\nconst handler = nextConnect()\r\n  .get(async (req, res) => {\r\n    const {\r\n      query: { id, name },\r\n    } = req;\r\n    const { slug } = req.query;\r\n    const intro_id = slug;\r\n    console.log(intro_id)\r\n\r\n    const introData = await models.intro.findOne({\r\n      where: {\r\n        intro_id: intro_id,\r\n      },\r\n\r\n    });\r\n\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: \"success\",\r\n      introData: introData ? introData : []\r\n    });\r\n  })\r\n  .post(async (req, res) => { })\r\n  .put(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const intro_id = slug;\r\n    const {\r\n      intro_title,\r\n      intro_url,\r\n      intro_btn,\r\n      intro_date_s,\r\n      intro_date_e,\r\n      intro_image,\r\n      is_has_bless,\r\n      is_admin,\r\n      is_use\r\n    } = body;\r\n    //SampleText.replace(\"Developer\", \"App Builder\");\r\n    const dataIntro = {\r\n      intro_title: intro_title,\r\n      intro_url: intro_url ? intro_url : \"\",\r\n      intro_btn: intro_btn ? intro_btn : \"\",\r\n      intro_date_s: intro_date_s.replace(\"+07:00\", \"+00:00\"),\r\n      intro_date_e: intro_date_e.replace(\"+07:00\", \"+00:00\"),\r\n      intro_image: intro_image,\r\n      is_has_bless: is_has_bless,\r\n      is_admin: is_admin,\r\n      is_use: is_use,\r\n    };\r\n\r\n    if (\r\n      intro_id == undefined ||\r\n      intro_url == undefined || intro_btn == undefined ||\r\n      intro_date_s == undefined || intro_date_s == undefined ||\r\n      intro_image == undefined || is_has_bless == undefined ||\r\n      is_admin == undefined || is_use == undefined\r\n    ) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        intro_id: intro_id,\r\n        data: dataIntro\r\n      });\r\n    }\r\n\r\n\r\n    const introDataResult = await models.intro.update(\r\n      dataIntro, {\r\n      where: {\r\n        intro_id: intro_id\r\n      }\r\n    }\r\n    );\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: \"success\",\r\n      // organization: organization ? organization : []\r\n    });\r\n\r\n    // await User.update({ lastName: \"Doe\" }, {\r\n    //   where: {\r\n    //     lastName: null\r\n    //   }\r\n    // });\r\n\r\n  })\r\n  .delete(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const intro_id = slug;\r\n    if (intro_id == undefined) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        intro_id: intro_id\r\n      });\r\n    }\r\n    var currentDate = moment().format()\r\n    // dataIntro.ip = ip\r\n    // dataIntro.is_deleted = 0\r\n    // dataIntro.date_created = currentDate.replace(\"+07:00\", \"+00:00\")\r\n    // dataIntro.date_updated = currentDate.replace(\"+07:00\", \"+00:00\")\r\n    const dataOrganization = {\r\n      is_deleted: 1,\r\n      date_updated: currentDate.replace(\"+07:00\", \"+00:00\"),\r\n\r\n    };\r\n    const intros = await models.intro.update(\r\n      dataOrganization, {\r\n      where: {\r\n        intro_id: intro_id\r\n      }\r\n    }\r\n    );\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: \"success\",\r\n      // organization: organization ? organization : []\r\n    });\r\n  })\r\n  .patch(async (req, res) => {\r\n\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}