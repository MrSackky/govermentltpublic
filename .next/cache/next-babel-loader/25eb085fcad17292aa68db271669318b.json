{"ast":null,"code":"import nextConnect from 'next-connect';\n\nconst models = require('../../../../db/models/index');\n\nimport middleware from '../../../../middleware/auth'; // import formidable from \"formidable-serverless\";\n\nimport Formidable from \"formidable-serverless\"; // import Formidable from \"formidable-serverless\";\n// import multiparty from 'multiparty'\n\nimport fs from \"fs\"; // import { IncomingForm } from 'formidable-serverless'\n\nimport multer from \"multer\";\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n}; // let storage = multer.diskStorage({\n//   destination: function (req, file, cb) {\n//     cb(null, 'public/uploads/')\n//   },\n//   filename: function (req, file, cb) {\n//     cb(null, Date.now() + '_' + file.originalname)\n//   }\n// })\n// const upload = multer({ dest: 'uploads/' })\n\nconst saveFile = async file => {\n  const data = fs.readFileSync(file.path);\n  fs.writeFileSync(`./public/${file.name}`, data);\n  await fs.unlinkSync(file.path);\n  return;\n};\n\nconst handler = nextConnect() // Middleware\n.use(middleware) // .use(middleware2)\n.post(async (req, res) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const form = new Formidable.IncomingForm({\n        multiples: true,\n        keepExtensions: true\n      });\n      form.uploadDir = \"./public/uploads/\";\n      form.keepExtensions = true;\n      form.once(\"error\", console.error);\n      form.on(\"fileBegin\", (name, file) => {\n        console.log(\"start uploading: \", file.name);\n      }).on(\"aborted\", () => console.log(\"Aborted...\"));\n      form.once(\"end\", () => {\n        console.log(\"Done!\");\n      });\n      await form.parse(req, async (err, fields, files) => {\n        if (err) {\n          throw String(JSON.stringify(err, null, 2));\n        } // console.log(files)\n        // console.log(\n        //   \"moving file: \",\n        //   files.file.path,\n        //   \" to \",\n        //   `public/uploads/${files.file.name}`\n        // );\n        // await fs.rename(\n        //   files.file.path,\n        //   `public/upload/${files.file.name}`,\n        //   err => {\n        //     if (err) throw err;\n        //   }\n        // );\n\n\n        console.log(\"files\");\n        console.log(files);\n        const upload = await multer({\n          dest: `public/uploads/c-${fields.id}/journal/`\n        });\n        const _files = [];\n\n        for (var i in files) {\n          // console.log(files[i].path)\n          const currentTimeInSeconds = Math.floor(Date.now() / 1000); //unix timestamp in seconds\n\n          fs.renameSync(files[i].path, `public/uploads/c-${fields.id}/journal/${currentTimeInSeconds + '-' + files[i].name}`);\n          var data = {\n            path: `public/uploads/c-${fields.id}/${currentTimeInSeconds + '-' + files[i].name}`,\n            name: files[i].name,\n            _name: currentTimeInSeconds + '-' + files[i].name\n          };\n\n          _files.push(data);\n        } // fs.renameSync(files.file.path, `public/uploads/${files.file.name}`);\n\n\n        req.form = {\n          fields,\n          files\n        }; // console.log(fields)\n\n        console.log(_files);\n        return res.status(200).json({\n          status: 200,\n          'success': true,\n          data: {\n            'message': [\"Upload completed.\"],\n            \"list\": _files\n          }\n        }); // return resolve((req, res));\n      });\n    } catch (error) {\n      console.log(error);\n      return resolve(res.status(403).send(error));\n    }\n  }); // try {\n  //   const promise = new Promise((resolve, reject) => {\n  //     // var form = new formidable.IncomingForm({ uploadDir: __dirname + '/uploaded' });\n  //     const form = new formidable.IncomingForm();\n  //     form.uploadDir = \"uploads/\";\n  //     form.keepExtensions = true;\n  //     form.parse(req, (err, fields, files) => {\n  //       if (err) reject(err);\n  //       resolve({ fields, files });\n  //     })\n  //   })\n  //   promise.then(({ fields, files }) => {\n  //     // res.status(200).json({ fields, files })\n  //     console.log(fields)\n  //     // console.log(files)\n  //     var result = [];\n  //     for (var i in files) {\n  //       result.push(files[i]);\n  //       console.log(files[i])\n  //       // const resultUpload =  uploader.single(files[i])\n  //       // console.log(resultUpload)\n  //     }\n  //     // const filesArr = JSON.parse(files);\n  //     // console.log(files)\n  //     // console.log(result)\n  //   })\n  // } catch (error) {\n  //   console.log(\"error\", error)\n  // }\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/upload/journal/index.js"],"names":["nextConnect","models","require","middleware","Formidable","fs","multer","config","api","bodyParser","saveFile","file","data","readFileSync","path","writeFileSync","name","unlinkSync","handler","use","post","req","res","Promise","resolve","reject","form","IncomingForm","multiples","keepExtensions","uploadDir","once","console","error","on","log","parse","err","fields","files","String","JSON","stringify","upload","dest","id","_files","i","currentTimeInSeconds","Math","floor","Date","now","renameSync","_name","push","status","json","send"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\r\nconst models = require('../../../../db/models/index');\r\nimport middleware from '../../../../middleware/auth';\r\n// import formidable from \"formidable-serverless\";\r\nimport Formidable from \"formidable-serverless\";\r\n// import Formidable from \"formidable-serverless\";\r\n// import multiparty from 'multiparty'\r\nimport fs from \"fs\";\r\n// import { IncomingForm } from 'formidable-serverless'\r\nimport multer from \"multer\";\r\n\r\nexport const config = {\r\n  api: {\r\n    bodyParser: false\r\n  }\r\n};\r\n\r\n// let storage = multer.diskStorage({\r\n//   destination: function (req, file, cb) {\r\n//     cb(null, 'public/uploads/')\r\n//   },\r\n//   filename: function (req, file, cb) {\r\n//     cb(null, Date.now() + '_' + file.originalname)\r\n//   }\r\n// })\r\n\r\n// const upload = multer({ dest: 'uploads/' })\r\nconst saveFile = async (file) => {\r\n  const data = fs.readFileSync(file.path);\r\n  fs.writeFileSync(`./public/${file.name}`, data);\r\n  await fs.unlinkSync(file.path);\r\n  return;\r\n};\r\n\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // .use(middleware2)\r\n  .post(async (req, res) => {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const form = new Formidable.IncomingForm({\r\n          multiples: true,\r\n          keepExtensions: true\r\n        });\r\n        form.uploadDir = \"./public/uploads/\";\r\n        form.keepExtensions = true;\r\n        form.once(\"error\", console.error);\r\n        form\r\n          .on(\"fileBegin\", (name, file) => {\r\n            console.log(\"start uploading: \", file.name);\r\n          })\r\n          .on(\"aborted\", () => console.log(\"Aborted...\"));\r\n        form.once(\"end\", () => {\r\n          console.log(\"Done!\");\r\n        });\r\n        await form.parse(req, async (err, fields, files) => {\r\n          if (err) {\r\n            throw String(JSON.stringify(err, null, 2));\r\n          }\r\n          // console.log(files)\r\n          // console.log(\r\n          //   \"moving file: \",\r\n          //   files.file.path,\r\n          //   \" to \",\r\n          //   `public/uploads/${files.file.name}`\r\n          // );\r\n          // await fs.rename(\r\n          //   files.file.path,\r\n          //   `public/upload/${files.file.name}`,\r\n          //   err => {\r\n          //     if (err) throw err;\r\n          //   }\r\n          // );\r\n          console.log(\"files\")\r\n          console.log(files)\r\n          const upload = await multer({ dest: `public/uploads/c-${fields.id}/journal/` })\r\n          const _files = []\r\n          for (var i in files) {\r\n            // console.log(files[i].path)\r\n            const currentTimeInSeconds = Math.floor(Date.now() / 1000); //unix timestamp in seconds\r\n            fs.renameSync(files[i].path, `public/uploads/c-${fields.id}/journal/${currentTimeInSeconds + '-' + files[i].name}`);\r\n            var data = {\r\n              path: `public/uploads/c-${fields.id}/${currentTimeInSeconds + '-' + files[i].name}`,\r\n              name: files[i].name,\r\n              _name: currentTimeInSeconds + '-' + files[i].name\r\n            };\r\n            _files.push(data)\r\n          }\r\n          // fs.renameSync(files.file.path, `public/uploads/${files.file.name}`);\r\n          req.form = { fields, files };\r\n          // console.log(fields)\r\n          console.log(_files)\r\n\r\n          return res.status(200).json({\r\n            status: 200,\r\n            'success': true,\r\n\r\n            data: {\r\n              'message': [\"Upload completed.\"],\r\n              \"list\": _files,\r\n            }\r\n\r\n          });\r\n          // return resolve((req, res));\r\n        });\r\n      } catch (error) {\r\n        console.log(error)\r\n        return resolve(res.status(403).send(error));\r\n      }\r\n    });\r\n\r\n    // try {\r\n    //   const promise = new Promise((resolve, reject) => {\r\n    //     // var form = new formidable.IncomingForm({ uploadDir: __dirname + '/uploaded' });\r\n    //     const form = new formidable.IncomingForm();\r\n    //     form.uploadDir = \"uploads/\";\r\n    //     form.keepExtensions = true;\r\n    //     form.parse(req, (err, fields, files) => {\r\n    //       if (err) reject(err);\r\n    //       resolve({ fields, files });\r\n    //     })\r\n\r\n    //   })\r\n\r\n    //   promise.then(({ fields, files }) => {\r\n    //     // res.status(200).json({ fields, files })\r\n    //     console.log(fields)\r\n    //     // console.log(files)\r\n    //     var result = [];\r\n\r\n\r\n    //     for (var i in files) {\r\n    //       result.push(files[i]);\r\n    //       console.log(files[i])\r\n    //       // const resultUpload =  uploader.single(files[i])\r\n    //       // console.log(resultUpload)\r\n    //     }\r\n\r\n    //     // const filesArr = JSON.parse(files);\r\n    //     // console.log(files)\r\n    //     // console.log(result)\r\n    //   })\r\n    // } catch (error) {\r\n    //   console.log(\"error\", error)\r\n    // }\r\n\r\n\r\n  });\r\n\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}