{"ast":null,"code":"import nextConnect from 'next-connect';\n\nconst models = require('../../../../db/models/index');\n\nimport middleware from '../../../../middleware/auth';\nimport { addDays } from '../../../../middleware/utils';\n\nconst bcrypt = require('bcryptjs');\n\nconst salt = bcrypt.genSaltSync(10);\nimport moment from 'moment';\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  return res.status(400).json({\n    status: 400,\n    message: 'deny permission!!'\n  });\n}) // Post method\n.post(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const {\n    organization_id,\n    question_title,\n    question_detail,\n    question_post,\n    question_personid,\n    is_show_personid,\n    is_approve,\n    approve_date,\n    date_question_date,\n    question_view\n  } = body; // const userId = slug;\n\n  const dataUser = {\n    \"organization_id\": organization_id,\n    \"question_title\": question_title,\n    \"question_detail\": question_detail,\n    \"question_post\": question_post,\n    \"question_personid\": question_personid,\n    \"is_show_personid\": is_show_personid,\n    \"is_approve\": is_approve,\n    \"date_question_date\": date_question_date.replace(\"+07:00\", \"+00:00\"),\n    \"question_view\": question_view\n  };\n  console.log(dataUser);\n\n  if (organization_id == undefined || question_title == undefined || question_detail == undefined || question_post == undefined || question_personid == undefined || is_show_personid == undefined || is_approve == undefined || approve_date == undefined || date_question_date == undefined || question_view == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      dataUser: dataUser\n    });\n  }\n\n  var currentDate = moment().format();\n  dataUser.is_deleted = 0;\n  dataUser.approve_date = currentDate.replace(\"+07:00\", \"+00:00\");\n  dataUser.date_created = currentDate.replace(\"+07:00\", \"+00:00\");\n  dataUser.date_updated = currentDate.replace(\"+07:00\", \"+00:00\");\n  const newAddactivities = await models.webboard_qs.create(dataUser);\n\n  if (newAddactivities == null) {\n    return res.status(500).json({\n      status: 500,\n      message: 'Internal error'\n    });\n  }\n\n  return res.status(200).json({\n    status: 200,\n    message: 'Insert completed'\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/admin/management/add-webboard-q.js"],"names":["nextConnect","models","require","middleware","addDays","bcrypt","salt","genSaltSync","moment","handler","use","get","req","res","status","json","message","post","body","slug","query","organization_id","question_title","question_detail","question_post","question_personid","is_show_personid","is_approve","approve_date","date_question_date","question_view","dataUser","replace","console","log","undefined","currentDate","format","is_deleted","date_created","date_updated","newAddactivities","webboard_qs","create"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\r\nconst models = require('../../../../db/models/index');\r\nimport middleware from '../../../../middleware/auth';\r\nimport { addDays } from '../../../../middleware/utils';\r\nconst bcrypt = require('bcryptjs');\r\nconst salt = bcrypt.genSaltSync(10);\r\nimport moment from 'moment';\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    return res.status(400).json({\r\n      status: 400,\r\n      message: 'deny permission!!',\r\n    });\r\n  })\r\n  // Post method\r\n  .post(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const {\r\n      organization_id,\r\n      question_title,\r\n      question_detail,\r\n      question_post,\r\n      question_personid,\r\n      is_show_personid,\r\n      is_approve,\r\n      approve_date,\r\n      date_question_date,\r\n      question_view,\r\n    } = body;\r\n    // const userId = slug;\r\n\r\n    const dataUser = {\r\n      \"organization_id\": organization_id,\r\n      \"question_title\": question_title,\r\n      \"question_detail\": question_detail,\r\n      \"question_post\": question_post,\r\n      \"question_personid\": question_personid,\r\n      \"is_show_personid\": is_show_personid,\r\n      \"is_approve\": is_approve,\r\n      \"date_question_date\": date_question_date.replace(\"+07:00\", \"+00:00\"),\r\n      \"question_view\": question_view,\r\n    };\r\n    console.log(dataUser);\r\n    if (\r\n      organization_id == undefined ||\r\n      question_title == undefined ||\r\n      question_detail == undefined ||\r\n      question_post == undefined ||\r\n      question_personid == undefined ||\r\n      is_show_personid == undefined ||\r\n      is_approve == undefined ||\r\n      approve_date == undefined ||\r\n      date_question_date == undefined ||\r\n      question_view == undefined\r\n    ) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        dataUser: dataUser,\r\n      });\r\n    }\r\n    \r\n    var currentDate = moment().format()\r\n    dataUser.is_deleted = 0\r\n    dataUser.approve_date = currentDate.replace(\"+07:00\", \"+00:00\")\r\n    dataUser.date_created = currentDate.replace(\"+07:00\", \"+00:00\")\r\n    dataUser.date_updated = currentDate.replace(\"+07:00\", \"+00:00\")\r\n\r\n    const newAddactivities = await models.webboard_qs.create(dataUser);\r\n\r\n    if (newAddactivities == null) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        message: 'Internal error',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'Insert completed',\r\n    });\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}