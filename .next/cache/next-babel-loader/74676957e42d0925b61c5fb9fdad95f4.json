{"ast":null,"code":"import moment from 'moment';\nimport nextConnect from 'next-connect';\nimport middleware from '../../../../middleware/auth';\nimport { getIPAddress } from '../../../../middleware/utils';\n\nconst models = require('../../../../db/models/index');\n\nconst bcrypt = require('bcryptjs');\n\nconst salt = bcrypt.genSaltSync(10);\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  return res.status(400).json({\n    status: 400,\n    message: 'deny permission!!'\n  });\n}) // Post method\n.post(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const {\n    organization_id,\n    poll_date_s,\n    poll_title,\n    poll_detail,\n    poll_date_e,\n    is_identity\n  } = body; // const userId = slug;\n\n  const dataUser = {\n    organization_id: organization_id,\n    poll_date_s: poll_date_s.replace('+07:00', '+00:00'),\n    poll_title: poll_title,\n    poll_detail: poll_detail,\n    poll_date_e: poll_date_e.replace('+07:00', '+00:00'),\n    is_identity: is_identity\n  };\n  console.log(dataUser);\n\n  if (organization_id == undefined || poll_date_s == undefined || poll_title == undefined || poll_detail == undefined || poll_date_e == undefined || is_identity == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      dataUser: dataUser\n    });\n  }\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format();\n  dataUser.ip = ip;\n  dataUser.is_deleted = 0;\n  dataUser.date_created = currentDate.replace('+07:00', '+00:00');\n  dataUser.date_updated = currentDate.replace('+07:00', '+00:00');\n  const newPoll = await models.poll.create(dataUser);\n\n  if (newPoll == null) {\n    return res.status(500).json({\n      status: 500,\n      message: 'Internal error'\n    });\n  }\n\n  return res.status(200).json({\n    status: 200,\n    message: 'Insert completed',\n    poll_id: newPoll.null\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/admin/management/add-poll.js"],"names":["moment","nextConnect","middleware","getIPAddress","models","require","bcrypt","salt","genSaltSync","handler","use","get","req","res","status","json","message","post","body","slug","query","organization_id","poll_date_s","poll_title","poll_detail","poll_date_e","is_identity","dataUser","replace","console","log","undefined","ip","currentDate","format","is_deleted","date_created","date_updated","newPoll","poll","create","poll_id","null"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport nextConnect from 'next-connect';\r\nimport middleware from '../../../../middleware/auth';\r\nimport { getIPAddress } from '../../../../middleware/utils';\r\nconst models = require('../../../../db/models/index');\r\nconst bcrypt = require('bcryptjs');\r\nconst salt = bcrypt.genSaltSync(10);\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    return res.status(400).json({\r\n      status: 400,\r\n      message: 'deny permission!!',\r\n    });\r\n  })\r\n  // Post method\r\n  .post(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const {\r\n      organization_id,\r\n      poll_date_s,\r\n      poll_title,\r\n      poll_detail,\r\n      poll_date_e,\r\n      is_identity,\r\n    } = body;\r\n    // const userId = slug;\r\n    const dataUser = {\r\n      organization_id: organization_id,\r\n      poll_date_s: poll_date_s.replace('+07:00', '+00:00'),\r\n      poll_title: poll_title,\r\n      poll_detail: poll_detail,\r\n      poll_date_e: poll_date_e.replace('+07:00', '+00:00'),\r\n      is_identity: is_identity,\r\n    };\r\n    console.log(dataUser);\r\n    if (\r\n      organization_id == undefined ||\r\n      poll_date_s == undefined ||\r\n      poll_title == undefined ||\r\n      poll_detail == undefined ||\r\n      poll_date_e == undefined ||\r\n      is_identity == undefined\r\n    ) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        dataUser: dataUser,\r\n      });\r\n    }\r\n\r\n    var ip = await getIPAddress();\r\n    var currentDate = moment().format();\r\n    dataUser.ip = ip;\r\n    dataUser.is_deleted = 0;\r\n    dataUser.date_created = currentDate.replace('+07:00', '+00:00');\r\n    dataUser.date_updated = currentDate.replace('+07:00', '+00:00');\r\n\r\n    const newPoll = await models.poll.create(dataUser);\r\n\r\n    if (newPoll == null) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        message: 'Internal error',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'Insert completed',\r\n      poll_id: newPoll.null,\r\n    });\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}