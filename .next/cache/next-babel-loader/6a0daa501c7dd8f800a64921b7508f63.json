{"ast":null,"code":"import nextConnect from 'next-connect';\n\nconst models = require('../../../db/models/index');\n\nimport middleware from '../../../middleware/auth';\nimport { addDays, getIPAddress } from '../../../middleware/utils';\n\nconst Sequelize = require('sequelize');\n\nconst Op = Sequelize.Op;\nimport moment from 'moment';\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  const {\n    query: {\n      id,\n      name\n    }\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const intro_blessing_id = slug;\n  const blessing = await models.intro_blessing.findOne({\n    where: {\n      intro_blessing_id: intro_blessing_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: \"success\",\n    blessing: blessing ? blessing : []\n  });\n}).put(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const intro_blessing_id = slug;\n  const {\n    organization_id,\n    text_blessing,\n    name_blessing,\n    position_blessing,\n    work_blessing,\n    year\n  } = body; //SampleText.replace(\"Developer\", \"App Builder\");\n\n  const dataBlessing = {\n    organization_id: organization_id,\n    text_blessing: text_blessing,\n    name_blessing: name_blessing,\n    position_blessing: position_blessing,\n    work_blessing: work_blessing,\n    year: year\n  };\n\n  if (organization_id == undefined || text_blessing == undefined || name_blessing == undefined || position_blessing == undefined || work_blessing == undefined || year == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      intro_blessing_id: intro_blessing_id,\n      data: dataBlessing\n    });\n  }\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format();\n  dataBlessing.ip = ip;\n  dataBlessing.is_deleted = 0;\n  dataBlessing.date_update = currentDate.replace(\"+07:00\", \"+00:00\");\n  const blessingDataResult = await models.intro_blessing.update(dataBlessing, {\n    where: {\n      intro_blessing_id: intro_blessing_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success' // organization: organization ? organization : []\n\n  }); // await User.update({ lastName: \"Doe\" }, {\n  //   where: {\n  //     lastName: null\n  //   }\n  // });\n}).delete(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const intro_blessing_id = slug;\n\n  if (intro_blessing_id == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      intro_blessing_id: intro_blessing_id\n    });\n  }\n\n  const dataBlessing = {\n    is_deleted: 1\n  };\n  const intro_blessing = await models.intro_blessing.update(dataBlessing, {\n    where: {\n      intro_blessing_id: intro_blessing_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success',\n    intro_blessing: intro_blessing ? intro_blessing : []\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/blessing/[slug].js"],"names":["nextConnect","models","require","middleware","addDays","getIPAddress","Sequelize","Op","moment","handler","use","get","req","res","query","id","name","slug","intro_blessing_id","blessing","intro_blessing","findOne","where","status","json","message","put","body","organization_id","text_blessing","name_blessing","position_blessing","work_blessing","year","dataBlessing","undefined","data","ip","currentDate","format","is_deleted","date_update","replace","blessingDataResult","update","delete"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\r\nconst models = require('../../../db/models/index');\r\nimport middleware from '../../../middleware/auth';\r\nimport { addDays , getIPAddress } from '../../../middleware/utils';\r\nconst Sequelize = require('sequelize');\r\nconst Op = Sequelize.Op;\r\nimport moment from 'moment';\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    const {\r\n      query: { id, name },\r\n    } = req;\r\n    const { slug } = req.query;\r\n    const intro_blessing_id = slug;\r\n\r\n    const blessing = await models.intro_blessing.findOne({\r\n      where: {\r\n        intro_blessing_id : intro_blessing_id,\r\n      },\r\n     \r\n    });\r\n    \r\n    \r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: \"success\",\r\n      blessing: blessing ? blessing : []\r\n    });\r\n  })\r\n  .put(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const intro_blessing_id = slug;\r\n    const {\r\n      organization_id,\r\n      text_blessing,\r\n      name_blessing,\r\n      position_blessing,\r\n      work_blessing,\r\n      year,\r\n    } = body;\r\n\r\n    //SampleText.replace(\"Developer\", \"App Builder\");\r\n    const dataBlessing = {\r\n      organization_id: organization_id,\r\n      text_blessing: text_blessing,\r\n      name_blessing: name_blessing,\r\n      position_blessing: position_blessing,\r\n      work_blessing: work_blessing,\r\n      year: year,\r\n    };\r\n\r\n    if (\r\n      organization_id == undefined ||\r\n      text_blessing == undefined ||\r\n      name_blessing == undefined ||\r\n      position_blessing == undefined ||\r\n      work_blessing == undefined ||\r\n      year == undefined\r\n    ) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        intro_blessing_id: intro_blessing_id,\r\n        data: dataBlessing,\r\n      });\r\n    }\r\n    \r\n    var ip = await getIPAddress()\r\n    var currentDate = moment().format()\r\n    dataBlessing.ip = ip\r\n    dataBlessing.is_deleted = 0\r\n    dataBlessing.date_update = currentDate.replace(\"+07:00\", \"+00:00\")\r\n\r\n    const blessingDataResult = await models.intro_blessing.update(dataBlessing, {\r\n      where: {\r\n        intro_blessing_id: intro_blessing_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      // organization: organization ? organization : []\r\n    });\r\n\r\n    // await User.update({ lastName: \"Doe\" }, {\r\n    //   where: {\r\n    //     lastName: null\r\n    //   }\r\n    // });\r\n  })\r\n  .delete(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const intro_blessing_id = slug;\r\n    if (intro_blessing_id == undefined) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        intro_blessing_id: intro_blessing_id,\r\n      });\r\n    }\r\n\r\n    const dataBlessing = {\r\n      is_deleted: 1,\r\n    };\r\n\r\n    const intro_blessing = await models.intro_blessing.update(dataBlessing, {\r\n      where: {\r\n        intro_blessing_id: intro_blessing_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      intro_blessing: intro_blessing ? intro_blessing : [],\r\n    });\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}