{"ast":null,"code":"import moment from 'moment';\nimport nextConnect from 'next-connect';\nimport middleware from '../../../middleware/auth';\nimport { getIPAddress } from '../../../middleware/utils';\n\nconst models = require('../../../db/models/index');\n\nconst Sequelize = require('sequelize');\n\nconst Op = Sequelize.Op;\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  const {\n    query: {\n      id,\n      name\n    }\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const header_id = slug;\n  const cover = await models.customer_header.findAndCountAll({\n    where: {\n      header_id: header_id,\n      is_deleted: 0\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success',\n    cover: cover ? cover.rows : []\n  });\n}).put(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const header_id = slug;\n  const {\n    header_image,\n    header_link,\n    is_show\n  } = body; //SampleText.replace(\"Developer\", \"App Builder\");\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format();\n  const dataMenu = {\n    header_image: header_image,\n    header_link: header_link,\n    is_show: is_show,\n    ip: ip,\n    date_updated: currentDate.replace(\"+07:00\", \"+00:00\")\n  };\n\n  if (header_image == undefined // header_link == undefined\n  ) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      header_id: header_id,\n      data: dataMenu\n    });\n  }\n\n  const menuDataResult = await models.customer_header.update(dataMenu, {\n    where: {\n      header_id: header_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: \"success\" // organization: organization ? organization : []\n\n  }); // await User.update({ lastName: \"Doe\" }, {\n  //   where: {\n  //     lastName: null\n  //   }\n  // });\n}).delete(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const header_id = slug;\n\n  if (header_id == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      header_id: header_id\n    });\n  }\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format(); // dataMenu.ip = ip\n  // dataMenu.is_deleted = 0\n  // dataMenu.date_created = currentDate.replace(\"+07:00\", \"+00:00\")\n  // dataMenu.date_updated = currentDate.replace(\"+07:00\", \"+00:00\")\n\n  const dataInformation = {\n    is_deleted: 1,\n    ip: ip,\n    date_updated: currentDate.replace(\"+07:00\", \"+00:00\")\n  };\n\n  const _menu = await models.customer_header.update(dataInformation, {\n    where: {\n      header_id: header_id\n    }\n  });\n\n  return res.status(200).json({\n    status: 200,\n    message: 'success'\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/covermenu/[slug].js"],"names":["moment","nextConnect","middleware","getIPAddress","models","require","Sequelize","Op","handler","use","get","req","res","query","id","name","slug","header_id","cover","customer_header","findAndCountAll","where","is_deleted","status","json","message","rows","put","body","header_image","header_link","is_show","ip","currentDate","format","dataMenu","date_updated","replace","undefined","data","menuDataResult","update","delete","dataInformation","_menu"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport nextConnect from 'next-connect';\r\nimport middleware from '../../../middleware/auth';\r\nimport { getIPAddress } from '../../../middleware/utils';\r\nconst models = require('../../../db/models/index');\r\nconst Sequelize = require('sequelize');\r\nconst Op = Sequelize.Op;\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    const {\r\n      query: { id, name },\r\n    } = req;\r\n    const { slug } = req.query;\r\n    const header_id = slug;\r\n\r\n    const cover = await models.customer_header.findAndCountAll({\r\n      where: {\r\n        header_id: header_id,\r\n        is_deleted: 0,\r\n      },\r\n\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      cover: cover ? cover.rows : [],\r\n    });\r\n\r\n  })\r\n  .put(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const header_id = slug;\r\n    const {\r\n      header_image,\r\n      header_link,\r\n      is_show\r\n    } = body;\r\n    //SampleText.replace(\"Developer\", \"App Builder\");\r\n    var ip = await getIPAddress()\r\n    var currentDate = moment().format()\r\n    const dataMenu = {\r\n      header_image: header_image,\r\n      header_link: header_link,\r\n      is_show: is_show,\r\n      ip: ip,\r\n      date_updated: currentDate.replace(\"+07:00\", \"+00:00\"),\r\n    };\r\n\r\n    if (\r\n      header_image == undefined\r\n      // header_link == undefined\r\n    ) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        header_id: header_id,\r\n        data: dataMenu\r\n      });\r\n    }\r\n\r\n\r\n    const menuDataResult = await models.customer_header.update(\r\n      dataMenu, {\r\n      where: {\r\n        header_id: header_id\r\n      }\r\n    }\r\n    );\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: \"success\",\r\n      // organization: organization ? organization : []\r\n    });\r\n\r\n    // await User.update({ lastName: \"Doe\" }, {\r\n    //   where: {\r\n    //     lastName: null\r\n    //   }\r\n    // });\r\n\r\n  })\r\n  .delete(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const header_id = slug;\r\n    if (header_id == undefined) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        header_id: header_id,\r\n      });\r\n    }\r\n    var ip = await getIPAddress()\r\n    var currentDate = moment().format()\r\n    // dataMenu.ip = ip\r\n    // dataMenu.is_deleted = 0\r\n    // dataMenu.date_created = currentDate.replace(\"+07:00\", \"+00:00\")\r\n    // dataMenu.date_updated = currentDate.replace(\"+07:00\", \"+00:00\")\r\n    const dataInformation = {\r\n      is_deleted: 1,\r\n      ip: ip,\r\n      date_updated: currentDate.replace(\"+07:00\", \"+00:00\"),\r\n    };\r\n\r\n    const _menu = await models.customer_header.update(dataInformation, {\r\n      where: {\r\n        header_id: header_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n    });\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}