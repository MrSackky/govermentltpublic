{"ast":null,"code":"import moment from 'moment';\nimport nextConnect from 'next-connect';\nimport middleware from '../../../middleware/auth';\nimport { getIPAddress } from '../../../middleware/utils';\n\nconst models = require('../../../db/models/index');\n\nconst Sequelize = require('sequelize');\n\nconst Op = Sequelize.Op;\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  const {\n    query: {\n      id,\n      name\n    }\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const poll_id = slug;\n  const poll = await models.poll_questions.findAndCountAll({\n    where: {\n      poll_id: poll_id,\n      is_deleted: 0\n    },\n    include: [{\n      model: models.poll_options,\n      as: 'options',\n      where: {\n        is_deleted: 0\n      }\n    }],\n    order: [[\"poll_questions_seq\", \"ASC\"], [\"poll_questions_id\", \"ASC\"], ['options', 'poll_questions_seq', 'ASC'], ['options', 'poll_option_id', 'ASC']]\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success',\n    pollQuestions: poll ? poll.rows : []\n  });\n}).put(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const menu_id = slug;\n  const {\n    poll_questions_title,\n    poll_questions_seq\n  } = body; //SampleText.replace(\"Developer\", \"App Builder\");\n\n  const dataMenu = {\n    poll_questions_title: poll_questions_title // poll_questions_seq: poll_questions_seq\n\n  };\n\n  if (poll_questions_title == undefined // poll_questions_seq == undefined\n  ) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      poll_questions_id: menu_id,\n      data: dataMenu\n    });\n  }\n\n  const menuDataResult = await models.poll_questions.update(dataMenu, {\n    where: {\n      poll_questions_id: menu_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: \"success\" // organization: organization ? organization : []\n\n  }); // await User.update({ lastName: \"Doe\" }, {\n  //   where: {\n  //     lastName: null\n  //   }\n  // });\n}).delete(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const menu_id = slug;\n\n  if (menu_id == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      menu_id: menu_id\n    });\n  }\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format(); // dataMenu.ip = ip\n  // dataMenu.is_deleted = 0\n  // dataMenu.date_created = currentDate.replace(\"+07:00\", \"+00:00\")\n  // dataMenu.date_updated = currentDate.replace(\"+07:00\", \"+00:00\")\n\n  const dataInformation = {\n    is_deleted: 1,\n    ip: ip,\n    date_updated: currentDate.replace(\"+07:00\", \"+00:00\")\n  };\n\n  const _menu = await models.poll_questions.update(dataInformation, {\n    where: {\n      poll_questions_id: menu_id\n    }\n  });\n\n  return res.status(200).json({\n    status: 200,\n    message: 'success'\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/pollmenu/[slug].js"],"names":["moment","nextConnect","middleware","getIPAddress","models","require","Sequelize","Op","handler","use","get","req","res","query","id","name","slug","poll_id","poll","poll_questions","findAndCountAll","where","is_deleted","include","model","poll_options","as","order","status","json","message","pollQuestions","rows","put","body","menu_id","poll_questions_title","poll_questions_seq","dataMenu","undefined","poll_questions_id","data","menuDataResult","update","delete","ip","currentDate","format","dataInformation","date_updated","replace","_menu"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport nextConnect from 'next-connect';\r\nimport middleware from '../../../middleware/auth';\r\nimport { getIPAddress } from '../../../middleware/utils';\r\nconst models = require('../../../db/models/index');\r\nconst Sequelize = require('sequelize');\r\nconst Op = Sequelize.Op;\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    const {\r\n      query: { id, name },\r\n    } = req;\r\n    const { slug } = req.query;\r\n    const poll_id = slug;\r\n\r\n    const poll = await models.poll_questions.findAndCountAll({\r\n      where: {\r\n        poll_id: poll_id,\r\n        is_deleted: 0,\r\n      },\r\n\r\n      include: [\r\n        {\r\n          model: models.poll_options,\r\n          as: 'options',\r\n          where: {\r\n            is_deleted: 0\r\n          },\r\n        },\r\n      ],\r\n\r\n      order: [\r\n        [\"poll_questions_seq\", \"ASC\"],\r\n        [\"poll_questions_id\", \"ASC\"],\r\n        ['options', 'poll_questions_seq', 'ASC'],\r\n        ['options', 'poll_option_id', 'ASC']\r\n      ]\r\n\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      pollQuestions: poll ? poll.rows : [],\r\n    });\r\n\r\n  })\r\n  .put(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const menu_id = slug;\r\n    const {\r\n      poll_questions_title,\r\n      poll_questions_seq\r\n    } = body;\r\n    //SampleText.replace(\"Developer\", \"App Builder\");\r\n    const dataMenu = {\r\n      poll_questions_title: poll_questions_title,\r\n      // poll_questions_seq: poll_questions_seq\r\n    };\r\n\r\n    if (\r\n      poll_questions_title == undefined\r\n      // poll_questions_seq == undefined\r\n    ) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        poll_questions_id: menu_id,\r\n        data: dataMenu\r\n      });\r\n    }\r\n\r\n\r\n    const menuDataResult = await models.poll_questions.update(\r\n      dataMenu, {\r\n      where: {\r\n        poll_questions_id: menu_id\r\n      }\r\n    }\r\n    );\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: \"success\",\r\n      // organization: organization ? organization : []\r\n    });\r\n\r\n    // await User.update({ lastName: \"Doe\" }, {\r\n    //   where: {\r\n    //     lastName: null\r\n    //   }\r\n    // });\r\n\r\n  })\r\n  .delete(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const menu_id = slug;\r\n    if (menu_id == undefined) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        menu_id: menu_id,\r\n      });\r\n    }\r\n    var ip = await getIPAddress()\r\n    var currentDate = moment().format()\r\n    // dataMenu.ip = ip\r\n    // dataMenu.is_deleted = 0\r\n    // dataMenu.date_created = currentDate.replace(\"+07:00\", \"+00:00\")\r\n    // dataMenu.date_updated = currentDate.replace(\"+07:00\", \"+00:00\")\r\n    const dataInformation = {\r\n      is_deleted: 1,\r\n      ip: ip,\r\n      date_updated: currentDate.replace(\"+07:00\", \"+00:00\"),\r\n    };\r\n\r\n    const _menu = await models.poll_questions.update(dataInformation, {\r\n      where: {\r\n        poll_questions_id: menu_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n    });\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}