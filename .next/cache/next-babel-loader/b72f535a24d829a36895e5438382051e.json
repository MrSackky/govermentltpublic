{"ast":null,"code":"import nextConnect from 'next-connect';\n\nconst models = require('../../../db/models/index');\n\nimport middleware from '../../../middleware/auth';\nimport { addDays, getIPAddress } from '../../../middleware/utils';\n\nconst Sequelize = require('sequelize');\n\nconst Op = Sequelize.Op;\nimport moment from 'moment';\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  const {\n    query: {\n      id,\n      name\n    }\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const poll_id = slug;\n  const poll = await models.poll.findOne({\n    where: {\n      poll_id: poll_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success',\n    poll: poll ? poll : []\n  });\n}).put(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const poll_id = slug;\n  const {\n    poll_title,\n    poll_date_s,\n    poll_date_e,\n    is_identity\n  } = body; //SampleText.replace(\"Developer\", \"App Builder\");\n\n  const dataPoll = {\n    poll_title: poll_title,\n    poll_date_s: poll_date_s.replace('+07:00', '+00:00'),\n    poll_date_e: poll_date_e.replace('+07:00', '+00:00'),\n    is_identity: is_identity\n  };\n\n  if (poll_title == undefined || poll_date_s == undefined || poll_date_e == undefined || is_identity == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      poll_id: poll_id,\n      data: dataPoll\n    });\n  }\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format();\n  dataPoll.ip = ip;\n  dataPoll.is_deleted = 0;\n  dataPoll.date_updated = currentDate.replace(\"+07:00\", \"+00:00\");\n  const pollDataResult = await models.poll.update(dataPoll, {\n    where: {\n      poll_id: poll_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success' // organization: organization ? organization : []\n\n  }); // await User.update({ lastName: \"Doe\" }, {\n  //   where: {\n  //     lastName: null\n  //   }\n  // });\n}).delete(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const poll_id = slug;\n\n  if (poll_id == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      poll_id: poll_id\n    });\n  }\n\n  const dataPoll = {\n    is_deleted: 1\n  };\n  const poll = await models.poll.update(dataPoll, {\n    where: {\n      poll_id: poll_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success',\n    poll: poll ? poll : []\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/poll/[slug].js"],"names":["nextConnect","models","require","middleware","addDays","getIPAddress","Sequelize","Op","moment","handler","use","get","req","res","query","id","name","slug","poll_id","poll","findOne","where","status","json","message","put","body","poll_title","poll_date_s","poll_date_e","is_identity","dataPoll","replace","undefined","data","ip","currentDate","format","is_deleted","date_updated","pollDataResult","update","delete"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\r\nconst models = require('../../../db/models/index');\r\nimport middleware from '../../../middleware/auth';\r\nimport { addDays , getIPAddress } from '../../../middleware/utils';\r\nconst Sequelize = require('sequelize');\r\nconst Op = Sequelize.Op;\r\nimport moment from 'moment';\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    const {\r\n      query: { id, name },\r\n    } = req;\r\n    const { slug } = req.query;\r\n    const poll_id = slug;\r\n\r\n    const poll = await models.poll.findOne({\r\n      where: {\r\n        poll_id: poll_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      poll: poll ? poll : [],\r\n    });\r\n  })\r\n  .put(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const poll_id = slug;\r\n    const {\r\n      poll_title,\r\n      poll_date_s,\r\n      poll_date_e,\r\n      is_identity,\r\n    } = body;\r\n\r\n    //SampleText.replace(\"Developer\", \"App Builder\");\r\n    const dataPoll = {\r\n      poll_title: poll_title,\r\n      poll_date_s: poll_date_s.replace('+07:00', '+00:00'),\r\n      poll_date_e: poll_date_e.replace('+07:00', '+00:00'),\r\n      is_identity: is_identity,\r\n    };\r\n\r\n    if (\r\n      poll_title == undefined ||\r\n      poll_date_s == undefined ||\r\n      poll_date_e == undefined ||\r\n      is_identity == undefined\r\n    ) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        poll_id: poll_id,\r\n        data: dataPoll,\r\n      });\r\n    }\r\n\r\n    var ip = await getIPAddress()\r\n    var currentDate = moment().format()\r\n    dataPoll.ip = ip\r\n    dataPoll.is_deleted = 0\r\n    dataPoll.date_updated = currentDate.replace(\"+07:00\", \"+00:00\")\r\n\r\n    const pollDataResult = await models.poll.update(dataPoll, {\r\n      where: {\r\n        poll_id: poll_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      // organization: organization ? organization : []\r\n    });\r\n\r\n    // await User.update({ lastName: \"Doe\" }, {\r\n    //   where: {\r\n    //     lastName: null\r\n    //   }\r\n    // });\r\n  })\r\n  .delete(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const poll_id = slug;\r\n    if (poll_id == undefined) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        poll_id: poll_id,\r\n      });\r\n    }\r\n\r\n    const dataPoll = {\r\n      is_deleted: 1,\r\n    };\r\n\r\n    const poll = await models.poll.update(dataPoll, {\r\n      where: {\r\n        poll_id: poll_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      poll: poll ? poll : [],\r\n    });\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}