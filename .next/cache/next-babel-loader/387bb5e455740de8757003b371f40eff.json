{"ast":null,"code":"import moment from 'moment';\nimport nextConnect from 'next-connect';\nimport middleware from '../../../middleware/auth';\nimport { getIPAddress } from '../../../middleware/utils';\n\nconst models = require('../../../db/models/index');\n\nconst Sequelize = require('sequelize');\n\nconst Op = Sequelize.Op;\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  const {\n    query: {\n      id,\n      name\n    }\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const journal_id = slug;\n  const journal = await models.journals.findOne({\n    where: {\n      journal_id: journal_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: \"success\",\n    journal: journal ? journal : []\n  });\n}).put(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const journal_id = slug;\n  const {\n    organization_id,\n    journal_subject,\n    journal_detail,\n    journal_file,\n    journal_ori,\n    is_show,\n    journal_img\n  } = body; //SampleText.replace(\"Developer\", \"App Builder\");\n\n  const dataJournal = {\n    organization_id: organization_id,\n    journal_subject: journal_subject,\n    journal_detail: journal_detail,\n    journal_file: journal_file,\n    journal_ori: journal_ori.replace('+07:00', '+00:00'),\n    is_show: is_show,\n    journal_img: journal_img\n  };\n\n  if (organization_id == undefined || journal_subject == undefined || journal_detail == undefined || journal_file == undefined || journal_ori == undefined || is_show == undefined || journal_img == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      journal_id: journal_id,\n      data: dataJournal\n    });\n  }\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format();\n  dataJournal.ip = ip;\n  dataJournal.is_deleted = 0;\n  dataJournal.date_update = currentDate.replace(\"+07:00\", \"+00:00\");\n  const journalDataResult = await models.journals.update(dataJournal, {\n    where: {\n      journal_id: journal_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success' // organization: organization ? organization : []\n\n  }); // await User.update({ lastName: \"Doe\" }, {\n  //   where: {\n  //     lastName: null\n  //   }\n  // });\n}).delete(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const journal_id = slug;\n\n  if (journal_id == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      journal_id: journal_id\n    });\n  }\n\n  const dataJournal = {\n    is_deleted: 1\n  };\n  const journal = await models.journals.update(dataJournal, {\n    where: {\n      journal_id: journal_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success',\n    journal: journal ? journal : []\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/journal/[slug].js"],"names":["moment","nextConnect","middleware","getIPAddress","models","require","Sequelize","Op","handler","use","get","req","res","query","id","name","slug","journal_id","journal","journals","findOne","where","status","json","message","put","body","organization_id","journal_subject","journal_detail","journal_file","journal_ori","is_show","journal_img","dataJournal","replace","undefined","data","ip","currentDate","format","is_deleted","date_update","journalDataResult","update","delete"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport nextConnect from 'next-connect';\r\nimport middleware from '../../../middleware/auth';\r\nimport { getIPAddress } from '../../../middleware/utils';\r\nconst models = require('../../../db/models/index');\r\nconst Sequelize = require('sequelize');\r\nconst Op = Sequelize.Op;\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    const {\r\n      query: { id, name },\r\n    } = req;\r\n    const { slug } = req.query;\r\n    const journal_id = slug;\r\n\r\n    const journal = await models.journals.findOne({\r\n      where: {\r\n        journal_id: journal_id,\r\n      },\r\n\r\n    });\r\n\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: \"success\",\r\n      journal: journal ? journal : []\r\n    });\r\n  })\r\n  .put(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const journal_id = slug;\r\n    const {\r\n      organization_id,\r\n      journal_subject,\r\n      journal_detail,\r\n      journal_file,\r\n      journal_ori,\r\n      is_show,\r\n      journal_img,\r\n    } = body;\r\n\r\n    //SampleText.replace(\"Developer\", \"App Builder\");\r\n    const dataJournal = {\r\n      organization_id: organization_id,\r\n      journal_subject: journal_subject,\r\n      journal_detail: journal_detail,\r\n      journal_file: journal_file,\r\n      journal_ori: journal_ori.replace('+07:00', '+00:00'),\r\n      is_show: is_show,\r\n      journal_img: journal_img,\r\n    };\r\n\r\n    if (\r\n      organization_id == undefined ||\r\n      journal_subject == undefined ||\r\n      journal_detail == undefined ||\r\n      journal_file == undefined ||\r\n      journal_ori == undefined ||\r\n      is_show == undefined ||\r\n      journal_img == undefined\r\n    ) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        journal_id: journal_id,\r\n        data: dataJournal,\r\n      });\r\n    }\r\n\r\n    var ip = await getIPAddress()\r\n    var currentDate = moment().format()\r\n    dataJournal.ip = ip\r\n    dataJournal.is_deleted = 0\r\n    dataJournal.date_update = currentDate.replace(\"+07:00\", \"+00:00\")\r\n\r\n    const journalDataResult = await models.journals.update(dataJournal, {\r\n      where: {\r\n        journal_id: journal_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      // organization: organization ? organization : []\r\n    });\r\n\r\n    // await User.update({ lastName: \"Doe\" }, {\r\n    //   where: {\r\n    //     lastName: null\r\n    //   }\r\n    // });\r\n  })\r\n  .delete(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const journal_id = slug;\r\n    if (journal_id == undefined) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        journal_id: journal_id,\r\n      });\r\n    }\r\n\r\n    const dataJournal = {\r\n      is_deleted: 1,\r\n    };\r\n\r\n    const journal = await models.journals.update(dataJournal, {\r\n      where: {\r\n        journal_id: journal_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      journal: journal ? journal : [],\r\n    });\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}