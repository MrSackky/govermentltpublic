{"ast":null,"code":"import nextConnect from 'next-connect';\nimport middleware from '../../../middleware/auth';\n\nconst models = require('../../../db/models/index');\n\nconst Sequelize = require('sequelize');\n\nconst Op = Sequelize.Op;\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  const {\n    method,\n    body\n  } = req;\n  const {\n    organization_id,\n    results,\n    page,\n    search,\n    sortField = \"intro_blessing_id\",\n    sortOrder = \"DESC\",\n    filters = []\n  } = req.query;\n  let _search = {};\n\n  if (search != \"\") {\n    if (filters == 'undefined' || filters == \"null\") {\n      // console.log(\"if1\")\n      _search = {\n        is_deleted: {\n          [Op.ne]: 1\n        },\n        [Op.or]: [{\n          intro_id: {\n            [Op.like]: '%' + search + '%'\n          }\n        }],\n        organization_id: organization_id\n      };\n    } else {\n      console.log(\"if2\");\n      console.log(filters);\n      _search = {\n        is_deleted: {\n          [Op.ne]: 1\n        },\n        [Op.or]: [{\n          intro_id: {\n            [Op.like]: '%' + search + '%'\n          }\n        }],\n        organization_id: organization_id\n      };\n    }\n  } else {\n    if (filters == 'undefined' || filters == 'null') {\n      // console.log(\"if3\")\n      // console.log(filters)\n      _search = {\n        is_deleted: {\n          [Op.ne]: 1\n        },\n        organization_id: organization_id\n      };\n    } else {\n      // console.log(\"if4\")\n      // console.log(filters)\n      _search = {\n        is_deleted: {\n          [Op.ne]: 1\n        },\n        organization_id: organization_id\n      };\n    }\n  } // console.log(_search)\n\n\n  const _blessing = await models.intro_blessing.findAndCountAll({\n    attributes: ['intro_blessing_id', 'organization_id', 'intro_id', 'text_blessing', 'name_blessing', 'position_blessing', 'work_blessing', 'year', 'ip', 'date_created', 'date_updated', 'is_deleted'],\n    where: _search,\n    include: [{\n      model: models.intro,\n      as: 'intros'\n    }],\n    offset: results * (page - 1),\n    limit: parseInt(results),\n    order: [[sortField != \"undefined\" && sortOrder != \"undefined\" ? sortField : \"intro_blessing_id\", sortOrder != \"undefined\" ? sortOrder == \"ascend\" ? \"ASC\" : \"DESC\" : \"DESC\"]]\n  });\n\n  return res.status(200).json({\n    info: {\n      page: page,\n      results: results\n    },\n    results: _blessing.rows,\n    totalCount: _blessing.count\n  });\n}).delete(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const intro_blessing_id = slug;\n\n  if (intro_blessing_id == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      intro_blessing_id: intro_blessing_id\n    });\n  }\n\n  const intro_blessing = await models.intro_blessing.update(dataBlessing, {\n    where: {\n      intro_blessing_id: intro_blessing_id\n    }\n  });\n  return res.status(200).json({\n    status: 200,\n    message: 'success',\n    intro_blessing: intro_blessing ? intro_blessing : []\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/blessing/index.js"],"names":["nextConnect","middleware","models","require","Sequelize","Op","handler","use","get","req","res","method","body","organization_id","results","page","search","sortField","sortOrder","filters","query","_search","is_deleted","ne","or","intro_id","like","console","log","_blessing","intro_blessing","findAndCountAll","attributes","where","include","model","intro","as","offset","limit","parseInt","order","status","json","info","rows","totalCount","count","delete","slug","intro_blessing_id","undefined","message","update","dataBlessing"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\r\nimport middleware from '../../../middleware/auth';\r\nconst models = require('../../../db/models/index');\r\nconst Sequelize = require('sequelize');\r\nconst Op = Sequelize.Op;\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    const {\r\n      method,\r\n      body,\r\n    } = req;\r\n    const { organization_id, results, page, search, sortField = \"intro_blessing_id\", sortOrder = \"DESC\", filters = [] } = req.query;\r\n    let _search = {};\r\n\r\n\r\n    if (search != \"\") {\r\n      if (filters == 'undefined' || filters == \"null\") {\r\n        // console.log(\"if1\")\r\n        _search = {\r\n          is_deleted: {\r\n            [Op.ne]: 1,\r\n          },\r\n          [Op.or]: [{\r\n            intro_id: {\r\n              [Op.like]: '%' + search + '%'\r\n            },\r\n          }\r\n          ],\r\n          organization_id: organization_id\r\n\r\n        }\r\n      } else {\r\n        console.log(\"if2\")\r\n        console.log(filters)\r\n        _search = {\r\n          is_deleted: {\r\n            [Op.ne]: 1,\r\n          },\r\n          [Op.or]: [{\r\n            intro_id: {\r\n              [Op.like]: '%' + search + '%'\r\n            },\r\n          }\r\n          ],\r\n          organization_id: organization_id\r\n\r\n\r\n        }\r\n      }\r\n\r\n\r\n    } else {\r\n      if (filters == 'undefined' || filters == 'null') {\r\n        // console.log(\"if3\")\r\n        // console.log(filters)\r\n\r\n        _search = {\r\n\r\n          is_deleted: {\r\n            [Op.ne]: 1,\r\n          },\r\n          organization_id: organization_id\r\n\r\n        }\r\n      } else {\r\n        // console.log(\"if4\")\r\n        // console.log(filters)\r\n        _search = {\r\n\r\n          is_deleted: {\r\n            [Op.ne]: 1,\r\n          },\r\n          organization_id: organization_id\r\n\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n\r\n    // console.log(_search)\r\n    const _blessing = await models.intro_blessing.findAndCountAll({\r\n      attributes: [\r\n        'intro_blessing_id', 'organization_id', 'intro_id', 'text_blessing',\r\n        'name_blessing', 'position_blessing', 'work_blessing', 'year',\r\n        'ip', 'date_created', 'date_updated', 'is_deleted'\r\n      ],\r\n      where: _search,\r\n      include: [\r\n        {\r\n          model: models.intro,\r\n          as: 'intros'\r\n        },\r\n      ],\r\n      offset: results * (page - 1),\r\n      limit: parseInt(results),\r\n      order: [\r\n        [sortField != \"undefined\" && sortOrder != \"undefined\" ? sortField : \"intro_blessing_id\", sortOrder != \"undefined\" ? sortOrder == \"ascend\" ? \"ASC\" : \"DESC\" : \"DESC\"]\r\n      ]\r\n    });\r\n    return res.status(200).json({\r\n      info: {\r\n        page: page,\r\n        results: results\r\n      },\r\n      results: _blessing.rows,\r\n      totalCount: _blessing.count\r\n    });\r\n\r\n  })\r\n  .delete(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const intro_blessing_id = slug;\r\n    if (intro_blessing_id == undefined) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        intro_blessing_id: intro_blessing_id,\r\n      });\r\n    }\r\n\r\n    const intro_blessing = await models.intro_blessing.update(dataBlessing, {\r\n      where: {\r\n        intro_blessing_id: intro_blessing_id,\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'success',\r\n      intro_blessing: intro_blessing ? intro_blessing : [],\r\n    })\r\n  })\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}