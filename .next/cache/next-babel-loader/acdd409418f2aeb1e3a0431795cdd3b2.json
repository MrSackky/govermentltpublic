{"ast":null,"code":"import nextConnect from 'next-connect';\n\nconst models = require('../../../../db/models/index');\n\nimport middleware from '../../../../middleware/auth';\nimport { addDays, getIPAddress } from '../../../../middleware/utils';\n\nconst bcrypt = require('bcryptjs');\n\nconst salt = bcrypt.genSaltSync(10);\nimport moment from 'moment';\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  return res.status(400).json({\n    status: 400,\n    message: 'deny permission!!'\n  });\n}) // Post method\n.post(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const {\n    organization_id,\n    journal_subject,\n    journal_detail,\n    journal_file,\n    journal_ori,\n    journal_img,\n    is_show\n  } = body; // const userId = slug;\n\n  const dataUser = {\n    \"organization_id\": organization_id,\n    \"journal_subject\": journal_subject,\n    \"journal_detail\": journal_detail,\n    \"journal_file\": journal_file,\n    \"journal_ori\": journal_ori,\n    \"journal_img\": journal_img,\n    \"is_show\": is_show\n  };\n  console.log(dataUser);\n\n  if (organization_id == undefined || journal_subject == undefined || journal_detail == undefined || journal_file == undefined || journal_ori == undefined || journal_img == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      dataUser: dataUser\n    });\n  }\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format();\n  dataUser.ip = ip;\n  dataUser.is_deleted = 0;\n  dataUser.date_created = currentDate.replace(\"+07:00\", \"+00:00\");\n  dataUser.date_update = currentDate.replace(\"+07:00\", \"+00:00\");\n  const newDocuments = await models.journals.create(dataUser);\n\n  if (newDocuments == null) {\n    return res.status(500).json({\n      status: 500,\n      message: 'Internal error'\n    });\n  }\n\n  return res.status(200).json({\n    status: 200,\n    message: 'Insert completed'\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/admin/management/add-journal.js"],"names":["nextConnect","models","require","middleware","addDays","getIPAddress","bcrypt","salt","genSaltSync","moment","handler","use","get","req","res","status","json","message","post","body","slug","query","organization_id","journal_subject","journal_detail","journal_file","journal_ori","journal_img","is_show","dataUser","console","log","undefined","ip","currentDate","format","is_deleted","date_created","replace","date_update","newDocuments","journals","create"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\r\nconst models = require('../../../../db/models/index');\r\nimport middleware from '../../../../middleware/auth';\r\nimport { addDays, getIPAddress } from '../../../../middleware/utils';\r\nconst bcrypt = require('bcryptjs');\r\nconst salt = bcrypt.genSaltSync(10);\r\nimport moment from 'moment';\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    return res.status(400).json({\r\n      status: 400,\r\n      message: 'deny permission!!',\r\n    });\r\n  })\r\n  // Post method\r\n  .post(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const {\r\n      organization_id,\r\n      journal_subject,\r\n      journal_detail,\r\n      journal_file,\r\n      journal_ori,\r\n      journal_img,\r\n      is_show,\r\n    } = body;\r\n    // const userId = slug;\r\n\r\n    const dataUser = {\r\n      \"organization_id\": organization_id,\r\n      \"journal_subject\": journal_subject,\r\n      \"journal_detail\": journal_detail,\r\n      \"journal_file\": journal_file,\r\n      \"journal_ori\": journal_ori,\r\n      \"journal_img\": journal_img,\r\n      \"is_show\": is_show,\r\n    };\r\n    console.log(dataUser);\r\n    if (\r\n      organization_id == undefined ||\r\n      journal_subject == undefined ||\r\n      journal_detail == undefined ||\r\n      journal_file == undefined ||\r\n      journal_ori == undefined ||\r\n      journal_img == undefined\r\n    ) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        dataUser: dataUser,\r\n      });\r\n    }\r\n\r\n    var ip = await getIPAddress()\r\n    var currentDate = moment().format()\r\n    dataUser.ip = ip\r\n    dataUser.is_deleted = 0\r\n    dataUser.date_created = currentDate.replace(\"+07:00\", \"+00:00\")\r\n    dataUser.date_update = currentDate.replace(\"+07:00\", \"+00:00\")\r\n\r\n    const newDocuments = await models.journals.create(dataUser);\r\n\r\n    if (newDocuments == null) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        message: 'Internal error',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'Insert completed',\r\n    });\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}