{"ast":null,"code":"import moment from 'moment';\nimport nextConnect from 'next-connect';\nimport middleware from '../../../../middleware/auth';\nimport { getIPAddress } from '../../../../middleware/utils';\n\nconst models = require('../../../../db/models/index');\n\nconst bcrypt = require('bcryptjs');\n\nconst salt = bcrypt.genSaltSync(10);\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  return res.status(400).json({\n    status: 400,\n    message: 'deny permission!!'\n  });\n}) // Post method\n.post(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const {\n    organization_id,\n    infor_date,\n    infor_title,\n    infor_detail,\n    infor_image,\n    infor_keyword,\n    infor_view,\n    status_active\n  } = body; // const userId = slug;\n\n  const dataUser = {\n    \"organization_id\": organization_id,\n    \"infor_date\": infor_date.replace(\"+07:00\", \"+00:00\"),\n    \"infor_title\": infor_title,\n    \"infor_detail\": infor_detail,\n    \"infor_image\": infor_image,\n    \"infor_keyword\": infor_keyword ? infor_keyword : \"\",\n    \"infor_view\": infor_view,\n    \"status_active\": status_active\n  };\n  console.log(dataUser);\n\n  if (organization_id == undefined || infor_date == undefined || infor_title == undefined || infor_detail == undefined || infor_image == undefined || infor_view == undefined || status_active == undefined) {\n    return res.status(200).json({\n      status: 201,\n      message: 'data incorrect',\n      dataUser: dataUser\n    });\n  }\n\n  var ip = await getIPAddress();\n  var currentDate = moment().format();\n  dataUser.ip = ip;\n  dataUser.is_deleted = 0;\n  dataUser.date_created = currentDate.replace(\"+07:00\", \"+00:00\");\n  dataUser.date_update = currentDate.replace(\"+07:00\", \"+00:00\");\n  const newInformation = await models.information.create(dataUser);\n\n  if (newInformation == null) {\n    return res.status(500).json({\n      status: 500,\n      message: 'Internal error'\n    });\n  }\n\n  return res.status(200).json({\n    status: 200,\n    message: 'Insert completed'\n  });\n});\nexport default handler;","map":{"version":3,"sources":["D:/govermentlt/pages/api/admin/management/add-information.js"],"names":["moment","nextConnect","middleware","getIPAddress","models","require","bcrypt","salt","genSaltSync","handler","use","get","req","res","status","json","message","post","body","slug","query","organization_id","infor_date","infor_title","infor_detail","infor_image","infor_keyword","infor_view","status_active","dataUser","replace","console","log","undefined","ip","currentDate","format","is_deleted","date_created","date_update","newInformation","information","create"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport nextConnect from 'next-connect';\r\nimport middleware from '../../../../middleware/auth';\r\nimport { getIPAddress } from '../../../../middleware/utils';\r\nconst models = require('../../../../db/models/index');\r\nconst bcrypt = require('bcryptjs');\r\nconst salt = bcrypt.genSaltSync(10);\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    return res.status(400).json({\r\n      status: 400,\r\n      message: 'deny permission!!',\r\n    });\r\n  })\r\n  // Post method\r\n  .post(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const { organization_id, infor_date, infor_title, infor_detail, infor_image, infor_keyword, infor_view, status_active } = body;\r\n    // const userId = slug;\r\n\r\n    const dataUser = {\r\n      \"organization_id\": organization_id,\r\n      \"infor_date\": infor_date.replace(\"+07:00\", \"+00:00\"),\r\n      \"infor_title\": infor_title,\r\n      \"infor_detail\": infor_detail,\r\n      \"infor_image\": infor_image,\r\n      \"infor_keyword\": infor_keyword ? infor_keyword : \"\",\r\n      \"infor_view\": infor_view,\r\n      \"status_active\": status_active\r\n    };\r\n    console.log(dataUser)\r\n    if (organization_id == undefined || infor_date == undefined || infor_title == undefined || infor_detail == undefined || infor_image == undefined || infor_view == undefined || status_active == undefined) {\r\n      return res.status(200).json({\r\n        status: 201,\r\n        message: 'data incorrect',\r\n        dataUser: dataUser,\r\n      });\r\n    }\r\n\r\n    var ip = await getIPAddress()\r\n    var currentDate = moment().format()\r\n    dataUser.ip = ip\r\n    dataUser.is_deleted = 0\r\n    dataUser.date_created = currentDate.replace(\"+07:00\", \"+00:00\")\r\n    dataUser.date_update = currentDate.replace(\"+07:00\", \"+00:00\")\r\n\r\n\r\n    const newInformation = await models.information.create(dataUser);\r\n\r\n    if (newInformation == null) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        message: 'Internal error',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'Insert completed',\r\n    });\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}